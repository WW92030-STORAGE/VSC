#include <cmath>
#include <fstream>


#include "everything.h"
#include <iostream>
#include <chrono>

#include "texture_texture.h"

#include <unordered_set>
using namespace std;



#include "misctests.h"
#include "main_utils.h" // definitions of paths and some things
#include "black_box_tests.h"

#include <chrono>

// TEST 9.85A TEMPEST (Bone extraction and visualization, requires collada parser)
void BoneTreeTest() {
	Scene s(512, 512);

// Replace me with the results from the collada parser
std::vector<Vector3> BONE_v({Vector3(-1.0, -1.0, -1.0), Vector3(-1.0, -1.0, 1.0), Vector3(-1.0, 1.0, -1.0), Vector3(-1.0, 1.0, 1.0), Vector3(1.0, -1.0, -1.0), Vector3(1.0, -1.0, 1.0), Vector3(1.0, 1.0, -1.0), Vector3(1.0, 1.0, 1.0), Vector3(-1.0, -1.0, 3.0), Vector3(-1.0, 1.0, 3.0), Vector3(1.0, 1.0, 3.0), Vector3(1.0, -1.0, 3.0), Vector3(-1.0, -1.0, 5.0), Vector3(-1.0, 1.0, 5.0), Vector3(1.0, 1.0, 5.0), Vector3(1.0, -1.0, 5.0), Vector3(3.0, 1.0, 1.0), Vector3(3.0, -1.0, 1.0), Vector3(3.0, 1.0, 3.0), Vector3(3.0, -1.0, 3.0)});
std::vector<std::vector<int>> BONE_t({{1, 2, 0}, {3, 6, 2}, {7, 4, 6}, {5, 0, 4}, {6, 0, 2}, {3, 10, 7}, {10, 15, 11}, {5, 19, 11}, {1, 9, 3}, {5, 8, 1}, {13, 15, 14}, {8, 13, 9}, {11, 12, 8}, {9, 14, 10}, {16, 19, 17}, {11, 18, 10}, {7, 17, 5}, {10, 16, 7}, {1, 3, 2}, {3, 7, 6}, {7, 5, 4}, {5, 1, 0}, {6, 4, 0}, {3, 9, 10}, {10, 14, 15}, {5, 17, 19}, {1, 8, 9}, {5, 11, 8}, {13, 12, 15}, {8, 12, 13}, {11, 15, 12}, {9, 13, 14}, {16, 18, 19}, {11, 19, 18}, {7, 16, 17}, {10, 18, 16}});
std::vector<Vector2> BONE_tex({Vector2(0.625, 0.0), Vector2(0.375, 0.25), Vector2(0.375, 0.0), Vector2(0.625, 0.25), Vector2(0.375, 0.5), Vector2(0.375, 0.25), Vector2(0.625, 0.5), Vector2(0.375, 0.75), Vector2(0.375, 0.5), Vector2(0.625, 0.75), Vector2(0.375, 1.0), Vector2(0.375, 0.75), Vector2(0.375, 0.5), Vector2(0.125, 0.75), Vector2(0.125, 0.5), Vector2(0.625, 0.25), Vector2(0.625, 0.5), Vector2(0.625, 0.5), Vector2(0.625, 0.5), Vector2(0.625, 0.75), Vector2(0.625, 0.75), Vector2(0.625, 0.75), Vector2(0.625, 0.75), Vector2(0.625, 0.75), Vector2(0.625, 0.0), Vector2(0.625, 0.25), Vector2(0.625, 0.25), Vector2(0.625, 0.75), Vector2(0.625, 1.0), Vector2(0.625, 1.0), Vector2(0.875, 0.5), Vector2(0.625, 0.75), Vector2(0.625, 0.5), Vector2(0.625, 0.0), Vector2(0.625, 0.25), Vector2(0.625, 0.25), Vector2(0.625, 0.75), Vector2(0.625, 1.0), Vector2(0.625, 1.0), Vector2(0.625, 0.25), Vector2(0.625, 0.5), Vector2(0.625, 0.5), Vector2(0.625, 0.5), Vector2(0.625, 0.75), Vector2(0.625, 0.75), Vector2(0.625, 0.75), Vector2(0.625, 0.5), Vector2(0.625, 0.5), Vector2(0.625, 0.5), Vector2(0.625, 0.75), Vector2(0.625, 0.75), Vector2(0.625, 0.5), Vector2(0.625, 0.5), Vector2(0.625, 0.5), Vector2(0.625, 0.0), Vector2(0.625, 0.25), Vector2(0.375, 0.25), Vector2(0.625, 0.25), Vector2(0.625, 0.5), Vector2(0.375, 0.5), Vector2(0.625, 0.5), Vector2(0.625, 0.75), Vector2(0.375, 0.75), Vector2(0.625, 0.75), Vector2(0.625, 1.0), Vector2(0.375, 1.0), Vector2(0.375, 0.5), Vector2(0.375, 0.75), Vector2(0.125, 0.75), Vector2(0.625, 0.25), Vector2(0.625, 0.25), Vector2(0.625, 0.5), Vector2(0.625, 0.5), Vector2(0.625, 0.5), Vector2(0.625, 0.75), Vector2(0.625, 0.75), Vector2(0.625, 0.75), Vector2(0.625, 0.75), Vector2(0.625, 0.0), Vector2(0.625, 0.0), Vector2(0.625, 0.25), Vector2(0.625, 0.75), Vector2(0.625, 0.75), Vector2(0.625, 1.0), Vector2(0.875, 0.5), Vector2(0.875, 0.75), Vector2(0.625, 0.75), Vector2(0.625, 0.0), Vector2(0.625, 0.0), Vector2(0.625, 0.25), Vector2(0.625, 0.75), Vector2(0.625, 0.75), Vector2(0.625, 1.0), Vector2(0.625, 0.25), Vector2(0.625, 0.25), Vector2(0.625, 0.5), Vector2(0.625, 0.5), Vector2(0.625, 0.5), Vector2(0.625, 0.75), Vector2(0.625, 0.75), Vector2(0.625, 0.75), Vector2(0.625, 0.5), Vector2(0.625, 0.5), Vector2(0.625, 0.5), Vector2(0.625, 0.75), Vector2(0.625, 0.5), Vector2(0.625, 0.5), Vector2(0.625, 0.5)});
std::vector<std::vector<int>> BONE_texco({{0, 1, 2}, {3, 4, 5}, {6, 7, 8}, {9, 10, 11}, {12, 13, 14}, {15, 16, 17}, {18, 19, 20}, {21, 22, 23}, {24, 25, 26}, {27, 28, 29}, {30, 31, 32}, {33, 34, 35}, {36, 37, 38}, {39, 40, 41}, {42, 43, 44}, {45, 46, 47}, {48, 49, 50}, {51, 52, 53}, {54, 55, 56}, {57, 58, 59}, {60, 61, 62}, {63, 64, 65}, {66, 67, 68}, {69, 70, 71}, {72, 73, 74}, {75, 76, 77}, {78, 79, 80}, {81, 82, 83}, {84, 85, 86}, {87, 88, 89}, {90, 91, 92}, {93, 94, 95}, {96, 97, 98}, {99, 100, 101}, {102, 103, 104}, {105, 106, 107}});
std::vector<std::string> BONE_bones({"Bone", "Bone_001", "Bone_002", "Bone_004", "Bone_003", "Bone_005"});
std::vector<int> BONE_parent({-1, 0, 1, 1, 2, 3});
std::vector<Matrix4> BONE_bonetrans({Matrix4(1.0, 0.0, 0.0, 0.0, 0.0, 0.0, -1.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0), Matrix4(0.8894976, 0.4569398, 8.84309e-08, 0.0, -0.4569398, 0.8894976, -1.78191e-08, 1.0, -8.68013e-08, -2.45576e-08, 1.0, 0.0, 0.0, 0.0, 0.0, 1.0), Matrix4(0.6794999, -0.7336756, -1.01477e-07, -2.98023e-08, 0.7336756, 0.6794999, -6.74618e-08, 0.9325978, 1.18449e-07, -2.86108e-08, 1.0, 1.77636e-15, 0.0, 0.0, 0.0, 1.0), Matrix4(0.6912999, 0.7225679, -1.17378e-07, -2.98023e-08, -0.7225679, 0.6912999, -4.7939e-08, 0.9325978, 4.65042e-08, 1.17954e-07, 1.0, 1.77636e-15, 0.0, 0.0, 0.0, 1.0), Matrix4(0.9396592, 0.3421122, 4.14499e-08, 0.0, -0.3421122, 0.9396592, 1.83863e-08, 1.245618, -3.26586e-08, -3.14574e-08, 1.0, 3.55271e-15, 0.0, 0.0, 0.0, 1.0), Matrix4(0.958605, 0.2847396, -6.81297e-08, 8.9407e-08, -0.2847396, 0.9586049, 5.97545e-08, 0.5986397, 8.2324e-08, -3.78817e-08, 1.0, 3.55271e-15, 0.0, 0.0, 0.0, 1.0)});
std::vector<Vector3> BONE_bonetips({Vector3(0.0, 1.0, 0.0), Vector3(-2.98023e-08, 0.9325978, 1.77636e-15), Vector3(0.0, 1.245618, 3.55271e-15), Vector3(8.9407e-08, 0.5986397, 3.55271e-15), Vector3(0.0, 0.0, 1.0), Vector3(1.0, 0.0, 0.0)});
std::unordered_set<int> BONE_atips({4, 5});




int root = 0;

std::queue<int> q;

std::unordered_map<int, Vector3> a_joints;
std::unordered_map<int, Vector3> a_tips;
std::unordered_map<int, Transform> a_trans;

// init the root bone

a_trans[root] = Transform(BONE_bonetrans[root]);
a_joints[root] = Transform(BONE_bonetrans[root]).origin;
if (BONE_atips.find(root) != BONE_atips.end()) a_tips[root] = BONE_bonetips[root] + a_joints[root];
else a_tips[root] = a_trans[root] * BONE_bonetips[root];


q.push(root);

// BFS to get the rest of them

std::unordered_map<int, std::vector<int>> children;
for (int i = 0; i < BONE_parent.size(); i++) {
	int pp = BONE_parent[i];
	if (pp < 0) continue;
	if (children.find(pp) == children.end()) children[pp] = std::vector<int>();
	children[pp].push_back(i);
}

std::cout << "START\n";

Transform t1(Matrix4(1.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 1.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 1.0));
Transform t2(Matrix4(0.0, 1.0, 0.0, 0.0, -1.0, 0.0, 7.54979e-08, 1.0, 7.54979e-08, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 1.0));

std::cout << t1.sprintf() << "\n\n" << t2.sprintf() << "\n\n" << (t1 * t2).sprintf() << "\n\n....\n";

while (q.size()) {
	int cur = q.front();
	q.pop();
	
	auto cur_trans = a_trans[cur];
	auto cur_joint = a_joints[cur];
	if (children.find(cur) == children.end()) continue;
	for (auto child : children[cur]) {
		a_trans[child] = cur_trans * Transform(BONE_bonetrans[child]);
		a_joints[child] = a_trans[child].origin;
		if (BONE_atips.find(child) != BONE_atips.end()) a_tips[child] = BONE_bonetips[child] + a_joints[child];
		else a_tips[child] = a_trans[child] * BONE_bonetips[child];

		q.push(child);
	}
}

cout << "children\n";
for (auto i : children) {
	cout << i.first << " = ";
	for (auto j : i.second) cout << j << " ";
	cout << endl;
}

cout << "a_joints\n";
for (auto i : a_joints) {
	cout << i.first << " = " << i.second.to_string() << endl;
}

cout << "a_tips\n";
for (auto i : a_tips) {
	cout << i.first << " = " << i.second.to_string() << endl;
}

cout << "a_trans\n";
for (auto i : a_trans) {
	cout << i.first << " = " << i.second.to_string() << endl;
}

	s.camera = Camera(M_PI / 2.0);
	s.camera.Trans(Transform(Vector3(0, -5, 0), Rotation3(Vector3(1, 0, 0), M_PI / 2)));
	s.cameras[0] = s.camera;

	float A = 0.1;

	PointLight PL(Vector3(1, 1, 1), A);
	PL.Trans(Transform(Vector3(-2, 2, 0)));
	// s.lights.push_back(PL);

	PointLight P2(Vector3(1, 1, 1), A);
	P2.Trans(Transform(Vector3(0, -2, 0)));
	s.lights.push_back(P2);

	PointLight P3(Vector3(1, 1, 1), A);
	P3.Trans(Transform(Vector3(2, 2, 0)));
	s.lights.push_back(P3);

for (int name = 0; name < BONE_bones.size(); name++) {
	Mesh m = icosphere(0.1, 0);
	m.Trans(Transform(a_joints[name]));
	s.addMesh(&m);

	Mesh m2 = icosphere(0.05, 0);
	m2.Trans(Transform(a_joints[name] * 0.75 + a_tips[name] * 0.25));
	s.addMesh(&m2);
	Mesh m3 = icosphere(0.05, 0);
	m3.Trans(Transform(a_joints[name] * 0.5 + a_tips[name] * 0.5));
	s.addMesh(&m3);
}

	std::cout << "Prepared\n";

	s.render(true);

	std::cout << "Drawn " << s.countTriangles() << " Triangles\n";

	s.outputBuffer(BUFFER_PATH);

	std::cout << "Stored\n";

}

void CylinderTest() {
	Scene s = scene_blank(true);
	Mesh m = cylinder(0.5, 2, 6);
	m.Trans(Transform(Vector3(0, -2, -4)));
	s.addMesh(&m);

	std::cout << "Prepared\n";

	s.render(true);

	std::cout << "Drawn " << s.countTriangles() << " Triangles\n";

	s.outputBuffer(BUFFER_PATH);

	std::cout << "Stored\n";

}

// TEST 9.85B DARKNESS (Bone rotation)
void SkeletonTest() {
std::vector<Vector3> BONE_v({Vector3(-1.0, -1.0, -1.0), Vector3(-1.0, -1.0, 1.0), Vector3(-1.0, 1.0, -1.0), Vector3(-1.0, 1.0, 1.0), Vector3(1.0, -1.0, -1.0), Vector3(1.0, -1.0, 1.0), Vector3(1.0, 1.0, -1.0), Vector3(1.0, 1.0, 1.0), Vector3(-1.0, -1.0, 3.0), Vector3(-1.0, 1.0, 3.0), Vector3(1.0, 1.0, 3.0), Vector3(1.0, -1.0, 3.0), Vector3(-1.0, -1.0, 5.0), Vector3(-1.0, 1.0, 5.0), Vector3(1.0, 1.0, 5.0), Vector3(1.0, -1.0, 5.0), Vector3(3.0, 1.0, 1.0), Vector3(3.0, -1.0, 1.0), Vector3(3.0, 1.0, 3.0), Vector3(3.0, -1.0, 3.0)});
std::vector<std::vector<int>> BONE_t({{1, 2, 0}, {3, 6, 2}, {7, 4, 6}, {5, 0, 4}, {6, 0, 2}, {3, 10, 7}, {10, 15, 11}, {5, 19, 11}, {1, 9, 3}, {5, 8, 1}, {13, 15, 14}, {8, 13, 9}, {11, 12, 8}, {9, 14, 10}, {16, 19, 17}, {11, 18, 10}, {7, 17, 5}, {10, 16, 7}, {1, 3, 2}, {3, 7, 6}, {7, 5, 4}, {5, 1, 0}, {6, 4, 0}, {3, 9, 10}, {10, 14, 15}, {5, 17, 19}, {1, 8, 9}, {5, 11, 8}, {13, 12, 15}, {8, 12, 13}, {11, 15, 12}, {9, 13, 14}, {16, 18, 19}, {11, 19, 18}, {7, 16, 17}, {10, 18, 16}});
std::vector<Vector2> BONE_tex({Vector2(0.625, 0.0), Vector2(0.375, 0.25), Vector2(0.375, 0.0), Vector2(0.625, 0.25), Vector2(0.375, 0.5), Vector2(0.375, 0.25), Vector2(0.625, 0.5), Vector2(0.375, 0.75), Vector2(0.375, 0.5), Vector2(0.625, 0.75), Vector2(0.375, 1.0), Vector2(0.375, 0.75), Vector2(0.375, 0.5), Vector2(0.125, 0.75), Vector2(0.125, 0.5), Vector2(0.625, 0.25), Vector2(0.625, 0.5), Vector2(0.625, 0.5), Vector2(0.625, 0.5), Vector2(0.625, 0.75), Vector2(0.625, 0.75), Vector2(0.625, 0.75), Vector2(0.625, 0.75), Vector2(0.625, 0.75), Vector2(0.625, 0.0), Vector2(0.625, 0.25), Vector2(0.625, 0.25), Vector2(0.625, 0.75), Vector2(0.625, 1.0), Vector2(0.625, 1.0), Vector2(0.875, 0.5), Vector2(0.625, 0.75), Vector2(0.625, 0.5), Vector2(0.625, 0.0), Vector2(0.625, 0.25), Vector2(0.625, 0.25), Vector2(0.625, 0.75), Vector2(0.625, 1.0), Vector2(0.625, 1.0), Vector2(0.625, 0.25), Vector2(0.625, 0.5), Vector2(0.625, 0.5), Vector2(0.625, 0.5), Vector2(0.625, 0.75), Vector2(0.625, 0.75), Vector2(0.625, 0.75), Vector2(0.625, 0.5), Vector2(0.625, 0.5), Vector2(0.625, 0.5), Vector2(0.625, 0.75), Vector2(0.625, 0.75), Vector2(0.625, 0.5), Vector2(0.625, 0.5), Vector2(0.625, 0.5), Vector2(0.625, 0.0), Vector2(0.625, 0.25), Vector2(0.375, 0.25), Vector2(0.625, 0.25), Vector2(0.625, 0.5), Vector2(0.375, 0.5), Vector2(0.625, 0.5), Vector2(0.625, 0.75), Vector2(0.375, 0.75), Vector2(0.625, 0.75), Vector2(0.625, 1.0), Vector2(0.375, 1.0), Vector2(0.375, 0.5), Vector2(0.375, 0.75), Vector2(0.125, 0.75), Vector2(0.625, 0.25), Vector2(0.625, 0.25), Vector2(0.625, 0.5), Vector2(0.625, 0.5), Vector2(0.625, 0.5), Vector2(0.625, 0.75), Vector2(0.625, 0.75), Vector2(0.625, 0.75), Vector2(0.625, 0.75), Vector2(0.625, 0.0), Vector2(0.625, 0.0), Vector2(0.625, 0.25), Vector2(0.625, 0.75), Vector2(0.625, 0.75), Vector2(0.625, 1.0), Vector2(0.875, 0.5), Vector2(0.875, 0.75), Vector2(0.625, 0.75), Vector2(0.625, 0.0), Vector2(0.625, 0.0), Vector2(0.625, 0.25), Vector2(0.625, 0.75), Vector2(0.625, 0.75), Vector2(0.625, 1.0), Vector2(0.625, 0.25), Vector2(0.625, 0.25), Vector2(0.625, 0.5), Vector2(0.625, 0.5), Vector2(0.625, 0.5), Vector2(0.625, 0.75), Vector2(0.625, 0.75), Vector2(0.625, 0.75), Vector2(0.625, 0.5), Vector2(0.625, 0.5), Vector2(0.625, 0.5), Vector2(0.625, 0.75), Vector2(0.625, 0.5), Vector2(0.625, 0.5), Vector2(0.625, 0.5)});
std::vector<std::vector<int>> BONE_texco({{0, 1, 2}, {3, 4, 5}, {6, 7, 8}, {9, 10, 11}, {12, 13, 14}, {15, 16, 17}, {18, 19, 20}, {21, 22, 23}, {24, 25, 26}, {27, 28, 29}, {30, 31, 32}, {33, 34, 35}, {36, 37, 38}, {39, 40, 41}, {42, 43, 44}, {45, 46, 47}, {48, 49, 50}, {51, 52, 53}, {54, 55, 56}, {57, 58, 59}, {60, 61, 62}, {63, 64, 65}, {66, 67, 68}, {69, 70, 71}, {72, 73, 74}, {75, 76, 77}, {78, 79, 80}, {81, 82, 83}, {84, 85, 86}, {87, 88, 89}, {90, 91, 92}, {93, 94, 95}, {96, 97, 98}, {99, 100, 101}, {102, 103, 104}, {105, 106, 107}});
std::vector<std::string> BONE_bones({"Bone", "Bone_001", "Bone_002", "Bone_004", "Bone_003", "Bone_005"});
std::vector<int> BONE_parent({-1, 0, 1, 1, 2, 3});
std::vector<Matrix4> BONE_bonetrans({Matrix4(1.0, 0.0, 0.0, 0.0, 0.0, 0.0, -1.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0), Matrix4(1.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 1.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 1.0), Matrix4(1.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 1.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 1.0), Matrix4(0.0, 1.0, 0.0, 0.0, -1.0, 0.0, 7.54979e-08, 1.0, 7.54979e-08, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 1.0), Matrix4(1.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 1.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 1.0), Matrix4(1.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 1.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 1.0)});
std::vector<Vector3> BONE_bonetips({Vector3(0.0, 1.0, 0.0), Vector3(0.0, 1.0, 0.0), Vector3(0.0, 1.0, 0.0), Vector3(0.0, 1.0, 0.0), Vector3(0.0, 0.0, 1.0), Vector3(1.0, 0.0, 0.0)});
std::unordered_set<int> BONE_atips({4, 5});
std::vector<std::unordered_map<int, float>> BONE_weights({std::unordered_map<int, float>({{0, 0.9123928}, {1, 0.0876072}}), std::unordered_map<int, float>({{0, 0.520787}, {1, 0.4718273}, {2, 0.000967168}, {4, 0.006418466}}), std::unordered_map<int, float>({{0, 0.9132175}, {1, 0.08678251}}), std::unordered_map<int, float>({{0, 0.522971}, {1, 0.4736596}, {4, 0.003369271}}), std::unordered_map<int, float>({{0, 0.8712919}, {1, 0.0564025}, {3, 0.03215259}, {5, 0.04015296}}), std::unordered_map<int, float>({{0, 0.2668086}, {1, 0.2441979}, {3, 0.2332977}, {5, 0.2556956}}), std::unordered_map<int, float>({{0, 0.8648418}, {1, 0.05643308}, {3, 0.03520345}, {5, 0.04352152}}), std::unordered_map<int, float>({{0, 0.2622015}, {1, 0.2389079}, {3, 0.237917}, {5, 0.2609735}}), std::unordered_map<int, float>({{0, 0.002806246}, {2, 0.475099}, {4, 0.5220947}}), std::unordered_map<int, float>({{0, 0.002911031}, {2, 0.4741396}, {4, 0.5229492}}), std::unordered_map<int, float>({{2, 0.0270819}, {3, 0.4278732}, {4, 0.07883459}, {5, 0.4662103}}), std::unordered_map<int, float>({{2, 0.4402776}, {3, 0.009076952}, {4, 0.4806121}, {5, 0.07003325}}), std::unordered_map<int, float>({{2, 0.09057366}, {4, 0.9094263}}), std::unordered_map<int, float>({{2, 0.08392393}, {4, 0.9160761}}), std::unordered_map<int, float>({{2, 0.008004128}, {3, 0.06594222}, {4, 0.8533447}, {5, 0.07270878}}), std::unordered_map<int, float>({{2, 0.08273655}, {4, 0.9172634}}), std::unordered_map<int, float>({{0, 0.04456901}, {1, 0.03612548}, {3, 0.05291193}, {5, 0.8663934}}), std::unordered_map<int, float>({{0, 0.04453325}, {1, 0.0362786}, {3, 0.03940868}, {5, 0.8797794}}), std::unordered_map<int, float>({{3, 0.07510328}, {5, 0.9248967}}), std::unordered_map<int, float>({{2, 0.06885421}, {4, 0.0760138}, {5, 0.8551321}})});


	Scene s = scene_blank(true);

	RiggedMesh rmesh(BONE_v, BONE_t, BONE_tex, BONE_texco, BONE_bones, BONE_parent, BONE_bonetrans, BONE_bonetips, BONE_atips, BONE_weights);

	rmesh.deformations[1] = Transform(Vector3(), Rotation3(Vector3(1, 1, 1), M_PI * 0.3)); // If the root transform is fucked up then all the rest will be also.
	rmesh.deformations[2] = Transform(Vector3(), Rotation3(Vector3(0, -1, 1), M_PI * 0.1)); // If the root transform is fucked up then all the rest will be also.
	rmesh.deformations[4] = Transform(Vector3(), Rotation3(Vector3(1, 0, 1), M_PI * -0.5)); // If the root transform is fucked up then all the rest will be also.
	rmesh.deformations[5] = Transform(Vector3(), Rotation3(Vector3(-1, 1, 0), M_PI * 0.2)); // If the root transform is fucked up then all the rest will be also.
	rmesh.computeAbsoluteTransforms();
	s.camera.Trans(Transform(Vector3(0, -4, 2), Rotation3(Vector3(1, 0, 0), M_PI * 0.5)));

	std::vector<Mesh> bone_vis = rmesh.visBones();

	for (auto i : bone_vis) s.addMesh(&i);

	s.render();

	s.drawMesh(rmesh);

	std::cout << "Prepared\n";

	

	std::cout << "Drawn " << s.countTriangles() << " Triangles\n";

	s.outputBuffer(BUFFER_PATH);

	std::cout << "Stored\n";
}

// TEST 9.85C LUNAR (Linear Blend Skinning)
void SkinTest() {
std::vector<Vector3> BONE_v({Vector3(-1.0, -1.0, -1.0), Vector3(-1.0, -1.0, 1.0), Vector3(-1.0, 1.0, -1.0), Vector3(-1.0, 1.0, 1.0), Vector3(1.0, -1.0, -1.0), Vector3(1.0, -1.0, 1.0), Vector3(1.0, 1.0, -1.0), Vector3(1.0, 1.0, 1.0), Vector3(-1.0, -1.0, 3.0), Vector3(-1.0, 1.0, 3.0), Vector3(1.0, 1.0, 3.0), Vector3(1.0, -1.0, 3.0), Vector3(-1.0, -1.0, 5.0), Vector3(-1.0, 1.0, 5.0), Vector3(1.0, 1.0, 5.0), Vector3(1.0, -1.0, 5.0), Vector3(3.0, 1.0, 1.0), Vector3(3.0, -1.0, 1.0), Vector3(3.0, 1.0, 3.0), Vector3(3.0, -1.0, 3.0)});
std::vector<std::vector<int>> BONE_t({{1, 2, 0}, {3, 6, 2}, {7, 4, 6}, {5, 0, 4}, {6, 0, 2}, {3, 10, 7}, {10, 15, 11}, {5, 19, 11}, {1, 9, 3}, {5, 8, 1}, {13, 15, 14}, {8, 13, 9}, {11, 12, 8}, {9, 14, 10}, {16, 19, 17}, {11, 18, 10}, {7, 17, 5}, {10, 16, 7}, {1, 3, 2}, {3, 7, 6}, {7, 5, 4}, {5, 1, 0}, {6, 4, 0}, {3, 9, 10}, {10, 14, 15}, {5, 17, 19}, {1, 8, 9}, {5, 11, 8}, {13, 12, 15}, {8, 12, 13}, {11, 15, 12}, {9, 13, 14}, {16, 18, 19}, {11, 19, 18}, {7, 16, 17}, {10, 18, 16}});
std::vector<Vector2> BONE_tex({Vector2(0.625, 0.0), Vector2(0.375, 0.25), Vector2(0.375, 0.0), Vector2(0.625, 0.25), Vector2(0.375, 0.5), Vector2(0.375, 0.25), Vector2(0.625, 0.5), Vector2(0.375, 0.75), Vector2(0.375, 0.5), Vector2(0.625, 0.75), Vector2(0.375, 1.0), Vector2(0.375, 0.75), Vector2(0.375, 0.5), Vector2(0.125, 0.75), Vector2(0.125, 0.5), Vector2(0.625, 0.25), Vector2(0.625, 0.5), Vector2(0.625, 0.5), Vector2(0.625, 0.5), Vector2(0.625, 0.75), Vector2(0.625, 0.75), Vector2(0.625, 0.75), Vector2(0.625, 0.75), Vector2(0.625, 0.75), Vector2(0.625, 0.0), Vector2(0.625, 0.25), Vector2(0.625, 0.25), Vector2(0.625, 0.75), Vector2(0.625, 1.0), Vector2(0.625, 1.0), Vector2(0.875, 0.5), Vector2(0.625, 0.75), Vector2(0.625, 0.5), Vector2(0.625, 0.0), Vector2(0.625, 0.25), Vector2(0.625, 0.25), Vector2(0.625, 0.75), Vector2(0.625, 1.0), Vector2(0.625, 1.0), Vector2(0.625, 0.25), Vector2(0.625, 0.5), Vector2(0.625, 0.5), Vector2(0.625, 0.5), Vector2(0.625, 0.75), Vector2(0.625, 0.75), Vector2(0.625, 0.75), Vector2(0.625, 0.5), Vector2(0.625, 0.5), Vector2(0.625, 0.5), Vector2(0.625, 0.75), Vector2(0.625, 0.75), Vector2(0.625, 0.5), Vector2(0.625, 0.5), Vector2(0.625, 0.5), Vector2(0.625, 0.0), Vector2(0.625, 0.25), Vector2(0.375, 0.25), Vector2(0.625, 0.25), Vector2(0.625, 0.5), Vector2(0.375, 0.5), Vector2(0.625, 0.5), Vector2(0.625, 0.75), Vector2(0.375, 0.75), Vector2(0.625, 0.75), Vector2(0.625, 1.0), Vector2(0.375, 1.0), Vector2(0.375, 0.5), Vector2(0.375, 0.75), Vector2(0.125, 0.75), Vector2(0.625, 0.25), Vector2(0.625, 0.25), Vector2(0.625, 0.5), Vector2(0.625, 0.5), Vector2(0.625, 0.5), Vector2(0.625, 0.75), Vector2(0.625, 0.75), Vector2(0.625, 0.75), Vector2(0.625, 0.75), Vector2(0.625, 0.0), Vector2(0.625, 0.0), Vector2(0.625, 0.25), Vector2(0.625, 0.75), Vector2(0.625, 0.75), Vector2(0.625, 1.0), Vector2(0.875, 0.5), Vector2(0.875, 0.75), Vector2(0.625, 0.75), Vector2(0.625, 0.0), Vector2(0.625, 0.0), Vector2(0.625, 0.25), Vector2(0.625, 0.75), Vector2(0.625, 0.75), Vector2(0.625, 1.0), Vector2(0.625, 0.25), Vector2(0.625, 0.25), Vector2(0.625, 0.5), Vector2(0.625, 0.5), Vector2(0.625, 0.5), Vector2(0.625, 0.75), Vector2(0.625, 0.75), Vector2(0.625, 0.75), Vector2(0.625, 0.5), Vector2(0.625, 0.5), Vector2(0.625, 0.5), Vector2(0.625, 0.75), Vector2(0.625, 0.5), Vector2(0.625, 0.5), Vector2(0.625, 0.5)});
std::vector<std::vector<int>> BONE_texco({{0, 1, 2}, {3, 4, 5}, {6, 7, 8}, {9, 10, 11}, {12, 13, 14}, {15, 16, 17}, {18, 19, 20}, {21, 22, 23}, {24, 25, 26}, {27, 28, 29}, {30, 31, 32}, {33, 34, 35}, {36, 37, 38}, {39, 40, 41}, {42, 43, 44}, {45, 46, 47}, {48, 49, 50}, {51, 52, 53}, {54, 55, 56}, {57, 58, 59}, {60, 61, 62}, {63, 64, 65}, {66, 67, 68}, {69, 70, 71}, {72, 73, 74}, {75, 76, 77}, {78, 79, 80}, {81, 82, 83}, {84, 85, 86}, {87, 88, 89}, {90, 91, 92}, {93, 94, 95}, {96, 97, 98}, {99, 100, 101}, {102, 103, 104}, {105, 106, 107}});
std::vector<std::string> BONE_bones({"Bone", "Bone_001", "Bone_002", "Bone_004", "Bone_003", "Bone_005"});
std::vector<int> BONE_parent({-1, 0, 1, 1, 2, 3});
std::vector<Matrix4> BONE_bonetrans({Matrix4(1.0, 0.0, 0.0, 0.0, 0.0, 0.0, -1.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0), Matrix4(1.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 1.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 1.0), Matrix4(1.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 1.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 1.0), Matrix4(0.0, 1.0, 0.0, 0.0, -1.0, 0.0, 7.54979e-08, 1.0, 7.54979e-08, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 1.0), Matrix4(1.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 1.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 1.0), Matrix4(1.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 1.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 1.0)});
std::vector<Vector3> BONE_bonetips({Vector3(0.0, 1.0, 0.0), Vector3(0.0, 1.0, 0.0), Vector3(0.0, 1.0, 0.0), Vector3(0.0, 1.0, 0.0), Vector3(0.0, 0.0, 1.0), Vector3(1.0, 0.0, 0.0)});
std::unordered_set<int> BONE_atips({4, 5});
std::vector<std::unordered_map<int, float>> BONE_weights({std::unordered_map<int, float>({{0, 0.9123928}, {1, 0.0876072}}), std::unordered_map<int, float>({{0, 0.520787}, {1, 0.4718273}, {2, 0.000967168}, {4, 0.006418466}}), std::unordered_map<int, float>({{0, 0.9132175}, {1, 0.08678251}}), std::unordered_map<int, float>({{0, 0.522971}, {1, 0.4736596}, {4, 0.003369271}}), std::unordered_map<int, float>({{0, 0.8712919}, {1, 0.0564025}, {3, 0.03215259}, {5, 0.04015296}}), std::unordered_map<int, float>({{0, 0.2668086}, {1, 0.2441979}, {3, 0.2332977}, {5, 0.2556956}}), std::unordered_map<int, float>({{0, 0.8648418}, {1, 0.05643308}, {3, 0.03520345}, {5, 0.04352152}}), std::unordered_map<int, float>({{0, 0.2622015}, {1, 0.2389079}, {3, 0.237917}, {5, 0.2609735}}), std::unordered_map<int, float>({{0, 0.002806246}, {2, 0.475099}, {4, 0.5220947}}), std::unordered_map<int, float>({{0, 0.002911031}, {2, 0.4741396}, {4, 0.5229492}}), std::unordered_map<int, float>({{2, 0.0270819}, {3, 0.4278732}, {4, 0.07883459}, {5, 0.4662103}}), std::unordered_map<int, float>({{2, 0.4402776}, {3, 0.009076952}, {4, 0.4806121}, {5, 0.07003325}}), std::unordered_map<int, float>({{2, 0.09057366}, {4, 0.9094263}}), std::unordered_map<int, float>({{2, 0.08392393}, {4, 0.9160761}}), std::unordered_map<int, float>({{2, 0.008004128}, {3, 0.06594222}, {4, 0.8533447}, {5, 0.07270878}}), std::unordered_map<int, float>({{2, 0.08273655}, {4, 0.9172634}}), std::unordered_map<int, float>({{0, 0.04456901}, {1, 0.03612548}, {3, 0.05291193}, {5, 0.8663934}}), std::unordered_map<int, float>({{0, 0.04453325}, {1, 0.0362786}, {3, 0.03940868}, {5, 0.8797794}}), std::unordered_map<int, float>({{3, 0.07510328}, {5, 0.9248967}}), std::unordered_map<int, float>({{2, 0.06885421}, {4, 0.0760138}, {5, 0.8551321}})});


	Scene s = scene_blank(true);

	RiggedMesh rmesh(BONE_v, BONE_t, BONE_tex, BONE_texco, BONE_bones, BONE_parent, BONE_bonetrans, BONE_bonetips, BONE_atips, BONE_weights);

	rmesh.deformations[1] = Transform(Vector3(), Rotation3(Vector3(1, 1, 1), M_PI * 0.3)); // If the root transform is fucked up then all the rest will be also.
	rmesh.deformations[2] = Transform(Vector3(), Rotation3(Vector3(0, -1, 1), M_PI * 0.1)); // If the root transform is fucked up then all the rest will be also.
	rmesh.deformations[4] = Transform(Vector3(), Rotation3(Vector3(1, 0, 1), M_PI * -0.5)); // If the root transform is fucked up then all the rest will be also.
	rmesh.deformations[5] = Transform(Vector3(), Rotation3(Vector3(-1, 1, 0), M_PI * 0.2)); // If the root transform is fucked up then all the rest will be also.
	rmesh.computeAbsoluteTransforms();
	rmesh.computeVertexLocations();

	s.camera.Trans(Transform(Vector3(0, -4, 2), Rotation3(Vector3(1, 0, 0), M_PI * 0.5)));

	std::vector<Mesh> bone_vis = rmesh.visBones();

	for (auto i : bone_vis) s.addMesh(&i);

	s.render();

	s.drawMesh(rmesh);

	std::cout << "Prepared\n";

	

	std::cout << "Drawn " << s.countTriangles() << " Triangles\n";

	s.outputBuffer(BUFFER_PATH);

	std::cout << "Stored\n";
}

// TEST 9.86A TOXIN II (Bone animations on a more sophisticated mesh)
void MCRProtoAnim() {
std::vector<Vector3> BONE_v({Vector3(0.2187499, 1.4375, -0.1562499), Vector3(0.2187499, 1.1875, -0.15625), Vector3(0.21875, 1.4375, 0.1562501), Vector3(0.21875, 1.1875, 0.15625), Vector3(0.4687501, 1.4375, 0.15625), Vector3(0.4687501, 1.1875, 0.15625), Vector3(0.46875, 1.4375, -0.15625), Vector3(0.46875, 1.1875, -0.15625), Vector3(0.46875, 1.4375, -0.15625), Vector3(0.2187499, 1.4375, -0.1562499), Vector3(0.46875, 1.1875, -0.15625), Vector3(0.4687501, 1.1875, 0.15625), Vector3(0.2187499, 1.1875, -0.15625), Vector3(0.21875, 1.1875, 0.15625), Vector3(0.2187499, 1.4375, -0.1562499), Vector3(0.2187499, 1.1875, -0.15625), Vector3(-0.2500001, 1.5, -0.1874997), Vector3(-0.2500001, 1.125, -0.1874997), Vector3(-0.2499999, 1.5, 0.1875002), Vector3(-0.2499999, 1.125, 0.1875002), Vector3(0.2500001, 1.5, 0.1875001), Vector3(0.2500001, 1.125, 0.1875), Vector3(0.2499999, 1.5, -0.1874999), Vector3(0.2499999, 1.125, -0.1875), Vector3(0.2499999, 1.5, -0.1874999), Vector3(-0.2500001, 1.5, -0.1874997), Vector3(0.2499999, 1.125, -0.1875), Vector3(0.2500001, 1.125, 0.1875), Vector3(-0.2500001, 1.125, -0.1874997), Vector3(-0.2499999, 1.125, 0.1875002), Vector3(-0.2500001, 1.5, -0.1874997), Vector3(-0.2500001, 1.125, -0.1874997), Vector3(-0.2500001, 0.8125, -0.1249998), Vector3(-0.2500001, 0.6875, -0.1249998), Vector3(-0.25, 0.8125, 0.1250002), Vector3(-0.25, 0.6875, 0.1250001), Vector3(0.2500001, 0.8125, 0.125), Vector3(0.2500001, 0.6875, 0.125), Vector3(0.25, 0.8125, -0.125), Vector3(0.25, 0.6875, -0.125), Vector3(0.25, 0.8125, -0.125), Vector3(-0.2500001, 0.8125, -0.1249998), Vector3(0.25, 0.6875, -0.125), Vector3(0.2500001, 0.6875, 0.125), Vector3(-0.2500001, 0.6875, -0.1249998), Vector3(-0.25, 0.6875, 0.1250001), Vector3(-0.2500001, 0.8125, -0.1249998), Vector3(-0.2500001, 0.6875, -0.1249998), Vector3(-0.1875, 1.125, -0.1249998), Vector3(-0.1875, 0.8125, -0.1249998), Vector3(-0.1875, 1.125, 0.1250002), Vector3(-0.1875, 0.8125, 0.1250001), Vector3(0.1875, 1.125, 0.125), Vector3(0.1875, 0.8125, 0.125), Vector3(0.1875, 1.125, -0.1249999), Vector3(0.1875, 0.8125, -0.125), Vector3(0.1875, 1.125, -0.1249999), Vector3(-0.1875, 1.125, -0.1249998), Vector3(0.1875, 0.8125, -0.125), Vector3(0.1875, 0.8125, 0.125), Vector3(-0.1875, 0.8125, -0.1249998), Vector3(-0.1875, 0.8125, 0.1250001), Vector3(-0.1875, 1.125, -0.1249998), Vector3(-0.1875, 0.8125, -0.1249998), Vector3(-0.1250001, 0.7834936, -0.233253), Vector3(-0.125, 0.6584936, -0.01674669), Vector3(-0.125, 1.0, -0.108253), Vector3(-0.125, 0.875, 0.1082533), Vector3(0.125, 1.0, -0.1082531), Vector3(0.125, 0.875, 0.1082532), Vector3(0.1249999, 0.7834936, -0.2332531), Vector3(0.125, 0.6584936, -0.01674675), Vector3(0.1249999, 0.7834936, -0.2332531), Vector3(-0.1250001, 0.7834936, -0.233253), Vector3(0.125, 0.6584936, -0.01674675), Vector3(0.125, 0.875, 0.1082532), Vector3(-0.125, 0.6584936, -0.01674669), Vector3(-0.125, 0.875, 0.1082533), Vector3(-0.1250001, 0.7834936, -0.233253), Vector3(-0.125, 0.6584936, -0.01674669), Vector3(-0.1562501, 0.5170475, -0.4592546), Vector3(-0.1562501, 0.3607974, -0.1886217), Vector3(-0.1562501, 0.841807, -0.2717546), Vector3(-0.15625, 0.685557, -0.00112164), Vector3(0.1562499, 0.841807, -0.2717548), Vector3(0.15625, 0.685557, -0.001121759), Vector3(0.1562498, 0.5170475, -0.4592548), Vector3(0.1562499, 0.3607974, -0.1886218), Vector3(0.1562498, 0.5170475, -0.4592548), Vector3(-0.1562501, 0.5170475, -0.4592546), Vector3(0.1562499, 0.3607974, -0.1886218), Vector3(0.15625, 0.685557, -0.001121759), Vector3(-0.1562501, 0.3607974, -0.1886217), Vector3(-0.15625, 0.685557, -0.00112164), Vector3(-0.1562501, 0.5170475, -0.4592546), Vector3(-0.1562501, 0.3607974, -0.1886217), Vector3(0.203125, 1.788833, -0.03124982), Vector3(0.2031249, 1.65625, -0.1638324), Vector3(0.203125, 1.65625, 0.1013326), Vector3(0.203125, 1.523667, -0.03124988), Vector3(0.265625, 1.65625, 0.1013326), Vector3(0.265625, 1.523667, -0.03124988), Vector3(0.265625, 1.788833, -0.03124988), Vector3(0.265625, 1.65625, -0.1638324), Vector3(0.265625, 1.788833, -0.03124988), Vector3(0.203125, 1.788833, -0.03124982), Vector3(0.265625, 1.65625, -0.1638324), Vector3(0.265625, 1.523667, -0.03124988), Vector3(0.2031249, 1.65625, -0.1638324), Vector3(0.203125, 1.523667, -0.03124988), Vector3(0.203125, 1.788833, -0.03124982), Vector3(0.2031249, 1.65625, -0.1638324), Vector3(-0.1875, 1.5625, -0.1249997), Vector3(-0.1875, 1.5, -0.1249997), Vector3(-0.1875, 1.5625, 0.1250002), Vector3(-0.1875, 1.5, 0.1250002), Vector3(0.1875, 1.5625, 0.1250001), Vector3(0.1875, 1.5, 0.1250001), Vector3(0.1875, 1.5625, -0.1249999), Vector3(0.1875, 1.5, -0.1249999), Vector3(0.1875, 1.5625, -0.1249999), Vector3(-0.1875, 1.5625, -0.1249997), Vector3(0.1875, 1.5, -0.1249999), Vector3(0.1875, 1.5, 0.1250001), Vector3(-0.1875, 1.5, -0.1249997), Vector3(-0.1875, 1.5, 0.1250002), Vector3(-0.1875, 1.5625, -0.1249997), Vector3(-0.1875, 1.5, -0.1249997), Vector3(0.162555, 2.103734, -0.3722839), Vector3(0.1729085, 1.988249, -0.4189854), Vector3(0.07507091, 1.93631, 0.02233231), Vector3(0.08542436, 1.820825, -0.02436918), Vector3(0.1971079, 1.93631, 0.04938727), Vector3(0.2074614, 1.820825, 0.002685666), Vector3(0.284592, 2.103734, -0.345229), Vector3(0.2949455, 1.988249, -0.3919305), Vector3(0.284592, 2.103734, -0.345229), Vector3(0.162555, 2.103734, -0.3722839), Vector3(0.2949455, 1.988249, -0.3919305), Vector3(0.2074614, 1.820825, 0.002685666), Vector3(0.1729085, 1.988249, -0.4189854), Vector3(0.08542436, 1.820825, -0.02436918), Vector3(0.162555, 2.103734, -0.3722839), Vector3(0.1729085, 1.988249, -0.4189854), Vector3(0.2089315, 1.940414, -0.2927104), Vector3(0.2141083, 1.882671, -0.3160612), Vector3(0.1464429, 1.820825, -0.01084172), Vector3(0.1516196, 1.763083, -0.0341925), Vector3(0.2074614, 1.820825, 0.002685666), Vector3(0.2126381, 1.763083, -0.02066504), Vector3(0.26995, 1.940414, -0.279183), Vector3(0.2751268, 1.882671, -0.3025338), Vector3(0.26995, 1.940414, -0.279183), Vector3(0.2089315, 1.940414, -0.2927104), Vector3(0.2751268, 1.882671, -0.3025338), Vector3(0.2126381, 1.763083, -0.02066504), Vector3(0.2141083, 1.882671, -0.3160612), Vector3(0.1516196, 1.763083, -0.0341925), Vector3(0.2089315, 1.940414, -0.2927104), Vector3(0.2141083, 1.882671, -0.3160612), Vector3(-0.2845923, 2.103734, -0.3452287), Vector3(-0.2949458, 1.988249, -0.3919303), Vector3(-0.1971079, 1.93631, 0.04938739), Vector3(-0.2074614, 1.820825, 0.002685844), Vector3(-0.07507091, 1.93631, 0.02233237), Vector3(-0.08542436, 1.820825, -0.02436912), Vector3(-0.1625553, 2.103734, -0.3722838), Vector3(-0.1729089, 1.988249, -0.4189853), Vector3(-0.1625553, 2.103734, -0.3722838), Vector3(-0.2845923, 2.103734, -0.3452287), Vector3(-0.1729089, 1.988249, -0.4189853), Vector3(-0.08542436, 1.820825, -0.02436912), Vector3(-0.2949458, 1.988249, -0.3919303), Vector3(-0.2074614, 1.820825, 0.002685844), Vector3(-0.1625553, 2.103734, -0.3722838), Vector3(-0.1729089, 1.988249, -0.4189853), Vector3(-0.2699503, 1.940414, -0.2791828), Vector3(-0.2751271, 1.882671, -0.3025336), Vector3(-0.2074614, 1.820825, 0.002685844), Vector3(-0.2126381, 1.763083, -0.02066487), Vector3(-0.1464429, 1.820825, -0.0108416), Vector3(-0.1516196, 1.763083, -0.03419238), Vector3(-0.2089318, 1.940414, -0.2927103), Vector3(-0.2141085, 1.882671, -0.316061), Vector3(-0.2089318, 1.940414, -0.2927103), Vector3(-0.2699503, 1.940414, -0.2791828), Vector3(-0.2141085, 1.882671, -0.316061), Vector3(-0.1516196, 1.763083, -0.03419238), Vector3(-0.2751271, 1.882671, -0.3025336), Vector3(-0.2126381, 1.763083, -0.02066487), Vector3(-0.2089318, 1.940414, -0.2927103), Vector3(-0.2141085, 1.882671, -0.316061), Vector3(-0.1249998, 1.8125, 0.4531253), Vector3(-0.21875, 1.9375, 3.16152e-07), Vector3(-0.21875, 1.5625, 2.71449e-07), Vector3(-0.1249998, 1.5625, 0.3750002), Vector3(0.21875, 1.5625, 0.0), Vector3(0.21875, 1.9375, 1.45784e-07), Vector3(0.1250001, 1.8125, 0.4531252), Vector3(0.1250001, 1.5625, 0.3750001), Vector3(-0.1249998, 1.8125, 0.4531253), Vector3(0.1250001, 1.8125, 0.4531252), Vector3(-0.1249998, 1.5625, 0.3750002), Vector3(0.1250001, 1.5625, 0.3750001), Vector3(0.1250001, 1.8125, 0.4531252), Vector3(-0.1249998, 1.8125, 0.4531253), Vector3(-0.1249998, 1.5625, 0.3750002), Vector3(0.1250001, 1.5625, 0.3750001), Vector3(-0.265625, 1.788833, -0.03124964), Vector3(-0.2656251, 1.65625, -0.1638322), Vector3(-0.265625, 1.65625, 0.1013328), Vector3(-0.265625, 1.523667, -0.0312497), Vector3(-0.203125, 1.65625, 0.1013328), Vector3(-0.203125, 1.523667, -0.0312497), Vector3(-0.203125, 1.788833, -0.0312497), Vector3(-0.203125, 1.65625, -0.1638322), Vector3(-0.203125, 1.788833, -0.0312497), Vector3(-0.265625, 1.788833, -0.03124964), Vector3(-0.203125, 1.65625, -0.1638322), Vector3(-0.203125, 1.523667, -0.0312497), Vector3(-0.2656251, 1.65625, -0.1638322), Vector3(-0.265625, 1.523667, -0.0312497), Vector3(-0.265625, 1.788833, -0.03124964), Vector3(-0.2656251, 1.65625, -0.1638322), Vector3(-0.25, 1.976408, 0.004334688), Vector3(-0.25, 1.734926, -0.06037002), Vector3(-0.25, 1.960231, 0.06470507), Vector3(-0.25, 1.71875, 3.02245e-07), Vector3(0.25, 1.960231, 0.06470489), Vector3(0.25, 1.71875, 0.0), Vector3(0.25, 1.976408, 0.004334509), Vector3(0.25, 1.734926, -0.0603702), Vector3(0.25, 1.976408, 0.004334509), Vector3(-0.25, 1.976408, 0.004334688), Vector3(0.25, 1.734926, -0.0603702), Vector3(0.25, 1.71875, 0.0), Vector3(-0.25, 1.734926, -0.06037002), Vector3(-0.25, 1.71875, 3.02245e-07), Vector3(-0.25, 1.976408, 0.004334688), Vector3(-0.25, 1.734926, -0.06037002), Vector3(-0.21875, 1.75, -0.1249997), Vector3(-0.21875, 1.5625, -0.1249997), Vector3(-0.21875, 1.75, 2.93801e-07), Vector3(-0.21875, 1.5625, 2.71449e-07), Vector3(0.21875, 1.75, 1.23432e-07), Vector3(0.21875, 1.5625, 0.0), Vector3(0.21875, 1.75, -0.1249998), Vector3(0.21875, 1.5625, -0.1249999), Vector3(0.21875, 1.75, -0.1249998), Vector3(-0.21875, 1.75, -0.1249997), Vector3(0.21875, 1.5625, -0.1249999), Vector3(0.21875, 1.5625, 0.0), Vector3(-0.21875, 1.5625, -0.1249997), Vector3(-0.21875, 1.5625, 2.71449e-07), Vector3(-0.21875, 1.75, -0.1249997), Vector3(-0.21875, 1.5625, -0.1249997), Vector3(-0.1875001, 1.958878, -0.1729438), Vector3(-0.1875001, 1.774226, -0.2055028), Vector3(-0.1875, 1.926319, 0.0117076), Vector3(-0.1875, 1.741667, -0.02085137), Vector3(0.1875, 1.926319, 0.01170748), Vector3(0.1875, 1.741667, -0.02085155), Vector3(0.1874999, 1.958878, -0.1729439), Vector3(0.1874999, 1.774226, -0.205503), Vector3(0.1874999, 1.958878, -0.1729439), Vector3(-0.1875001, 1.958878, -0.1729438), Vector3(0.1874999, 1.774226, -0.205503), Vector3(0.1875, 1.741667, -0.02085155), Vector3(-0.1875001, 1.774226, -0.2055028), Vector3(-0.1875, 1.741667, -0.02085137), Vector3(-0.1875001, 1.958878, -0.1729438), Vector3(-0.1875001, 1.774226, -0.2055028), Vector3(-0.1562501, 1.836218, -0.2803699), Vector3(-0.1562501, 1.711694, -0.2694755), Vector3(-0.15625, 1.858007, -0.03132128), Vector3(-0.15625, 1.733483, -0.0204268), Vector3(0.15625, 1.858007, -0.0313214), Vector3(0.15625, 1.733483, -0.02042698), Vector3(0.1562499, 1.836218, -0.2803701), Vector3(0.1562499, 1.711694, -0.2694756), Vector3(0.1562499, 1.836218, -0.2803701), Vector3(-0.1562501, 1.836218, -0.2803699), Vector3(0.1562499, 1.711694, -0.2694756), Vector3(0.15625, 1.733483, -0.02042698), Vector3(-0.1562501, 1.711694, -0.2694755), Vector3(-0.15625, 1.733483, -0.0204268), Vector3(-0.1562501, 1.836218, -0.2803699), Vector3(-0.1562501, 1.711694, -0.2694755), Vector3(-0.1868751, 1.696934, -0.2897281), Vector3(-0.1868751, 1.544367, -0.1828994), Vector3(-0.1868751, 1.803762, -0.1371609), Vector3(-0.186875, 1.651195, -0.03033232), Vector3(0.1868749, 1.803762, -0.1371611), Vector3(0.1868749, 1.651195, -0.0303325), Vector3(0.1868749, 1.696934, -0.2897282), Vector3(0.1868749, 1.544367, -0.1828995), Vector3(0.1868749, 1.696934, -0.2897282), Vector3(-0.1868751, 1.696934, -0.2897281), Vector3(0.1868749, 1.544367, -0.1828995), Vector3(0.1868749, 1.651195, -0.0303325), Vector3(-0.1868751, 1.544367, -0.1828994), Vector3(-0.186875, 1.651195, -0.03033232), Vector3(-0.1868751, 1.696934, -0.2897281), Vector3(-0.1868751, 1.544367, -0.1828994), Vector3(-0.1556251, 1.537488, -0.2903251), Vector3(-0.155625, 1.437415, -0.1332435), Vector3(-0.1556251, 1.641857, -0.2238342), Vector3(-0.155625, 1.541785, -0.06675261), Vector3(0.1556249, 1.641857, -0.2238343), Vector3(0.1556249, 1.541785, -0.06675273), Vector3(0.1556249, 1.537488, -0.2903252), Vector3(0.1556249, 1.437415, -0.1332436), Vector3(0.1556249, 1.537488, -0.2903252), Vector3(-0.1556251, 1.537488, -0.2903251), Vector3(0.1556249, 1.437415, -0.1332436), Vector3(0.1556249, 1.541785, -0.06675273), Vector3(-0.155625, 1.437415, -0.1332435), Vector3(-0.155625, 1.541785, -0.06675261), Vector3(-0.1556251, 1.537488, -0.2903251), Vector3(-0.155625, 1.437415, -0.1332435), Vector3(-0.1250002, 0.3304446, -0.6138167), Vector3(-0.1250001, 0.1536679, -0.43704), Vector3(-0.1250001, 0.5514155, -0.3928458), Vector3(-0.1250001, 0.3746387, -0.2160691), Vector3(0.1249998, 0.5514155, -0.3928459), Vector3(0.1249999, 0.3746387, -0.2160692), Vector3(0.1249997, 0.3304446, -0.6138168), Vector3(0.1249998, 0.1536679, -0.4370401), Vector3(0.1249997, 0.3304446, -0.6138168), Vector3(-0.1250002, 0.3304446, -0.6138167), Vector3(0.1249998, 0.1536679, -0.4370401), Vector3(0.1249999, 0.3746387, -0.2160692), Vector3(-0.1250001, 0.1536679, -0.43704), Vector3(-0.1250001, 0.3746387, -0.2160691), Vector3(-0.1250002, 0.3304446, -0.6138167), Vector3(-0.1250001, 0.1536679, -0.43704), Vector3(-0.09375029, 0.1781514, -0.8237652), Vector3(-0.09375023, 0.01577156, -0.7300152), Vector3(-0.09375017, 0.3344013, -0.5531322), Vector3(-0.09375017, 0.1720215, -0.4593822), Vector3(0.09374976, 0.3344013, -0.5531324), Vector3(0.09374982, 0.1720215, -0.4593823), Vector3(0.09374964, 0.1781514, -0.8237653), Vector3(0.0937497, 0.01577156, -0.7300153), Vector3(0.09374964, 0.1781514, -0.8237653), Vector3(-0.09375029, 0.1781514, -0.8237652), Vector3(0.0937497, 0.01577156, -0.7300153), Vector3(0.09374982, 0.1720215, -0.4593823), Vector3(-0.09375023, 0.01577156, -0.7300152), Vector3(-0.09375017, 0.1720215, -0.4593822), Vector3(-0.09375029, 0.1781514, -0.8237652), Vector3(-0.09375023, 0.01577156, -0.7300152), Vector3(-0.06250035, 0.1324594, -0.9737781), Vector3(-0.06250035, 0.007935047, -0.9628836), Vector3(-0.06250023, 0.1542483, -0.7247294), Vector3(-0.06250023, 0.02972394, -0.713835), Vector3(0.0624997, 0.1542483, -0.7247294), Vector3(0.0624997, 0.02972394, -0.713835), Vector3(0.06249958, 0.1324594, -0.9737781), Vector3(0.06249958, 0.007935047, -0.9628836), Vector3(0.06249958, 0.1324594, -0.9737781), Vector3(-0.06250035, 0.1324594, -0.9737781), Vector3(0.06249958, 0.007935047, -0.9628836), Vector3(0.0624997, 0.02972394, -0.713835), Vector3(-0.06250035, 0.007935047, -0.9628836), Vector3(-0.06250023, 0.02972394, -0.713835), Vector3(-0.06250035, 0.1324594, -0.9737781), Vector3(-0.06250035, 0.007935047, -0.9628836), Vector3(-0.4375001, 1.5, -0.1249997), Vector3(-0.4375001, 0.75, -0.1249997), Vector3(-0.4375, 1.5, 0.1250003), Vector3(-0.4375, 0.75, 0.1250002), Vector3(-0.25, 1.5, 0.1250002), Vector3(-0.25, 0.75, 0.1250002), Vector3(-0.2500001, 1.5, -0.1249997), Vector3(-0.2500001, 0.75, -0.1249998), Vector3(-0.2500001, 1.5, -0.1249997), Vector3(-0.4375001, 1.5, -0.1249997), Vector3(-0.2500001, 0.75, -0.1249998), Vector3(-0.25, 0.75, 0.1250002), Vector3(-0.4375001, 0.75, -0.1249997), Vector3(-0.4375, 0.75, 0.1250002), Vector3(-0.4375001, 1.5, -0.1249997), Vector3(-0.4375001, 0.75, -0.1249997), Vector3(-0.4687501, 1.4375, -0.1562497), Vector3(-0.4687501, 1.1875, -0.1562497), Vector3(-0.46875, 1.4375, 0.1562503), Vector3(-0.46875, 1.1875, 0.1562503), Vector3(-0.2187499, 1.4375, 0.1562502), Vector3(-0.2187499, 1.1875, 0.1562502), Vector3(-0.21875, 1.4375, -0.1562497), Vector3(-0.21875, 1.1875, -0.1562498), Vector3(-0.21875, 1.4375, -0.1562497), Vector3(-0.4687501, 1.4375, -0.1562497), Vector3(-0.21875, 1.1875, -0.1562498), Vector3(-0.2187499, 1.1875, 0.1562502), Vector3(-0.4687501, 1.1875, -0.1562497), Vector3(-0.46875, 1.1875, 0.1562503), Vector3(-0.4687501, 1.4375, -0.1562497), Vector3(-0.4687501, 1.1875, -0.1562497), Vector3(0.25, 1.5, -0.1249999), Vector3(0.25, 0.75, -0.125), Vector3(0.2500001, 1.5, 0.1250001), Vector3(0.2500001, 0.75, 0.125), Vector3(0.4375001, 1.5, 0.125), Vector3(0.4375001, 0.75, 0.1249999), Vector3(0.4375, 1.5, -0.125), Vector3(0.4375, 0.75, -0.1250001), Vector3(0.4375, 1.5, -0.125), Vector3(0.25, 1.5, -0.1249999), Vector3(0.4375, 0.75, -0.1250001), Vector3(0.4375001, 0.75, 0.1249999), Vector3(0.25, 0.75, -0.125), Vector3(0.2500001, 0.75, 0.125), Vector3(0.25, 1.5, -0.1249999), Vector3(0.25, 0.75, -0.125), Vector3(-0.007213771, 0.125625, -0.07528269), Vector3(-0.007213771, -0.000624991, -0.07528275), Vector3(0.0201314, 0.125625, 0.2372733), Vector3(0.0201314, -0.000625028, 0.2372733), Vector3(0.2704253, 0.125625, 0.2153753), Vector3(0.2704253, -0.000625026, 0.2153753), Vector3(0.2430801, 0.125625, -0.09718072), Vector3(0.2430801, -0.000624988, -0.09718072), Vector3(0.2430801, 0.125625, -0.09718072), Vector3(-0.007213771, 0.125625, -0.07528269), Vector3(0.2430801, -0.000624988, -0.09718072), Vector3(0.2704253, -0.000625026, 0.2153753), Vector3(-0.007213771, -0.000624991, -0.07528275), Vector3(0.0201314, -0.000625028, 0.2372733), Vector3(-0.007213771, 0.125625, -0.07528269), Vector3(-0.007213771, -0.000624991, -0.07528275), Vector3(-0.01428496, 0.6840291, -0.09156692), Vector3(-0.000548264, 0.3300302, 0.06544369), Vector3(0.006615519, 0.7907975, 0.1473262), Vector3(0.02035224, 0.4367986, 0.3043369), Vector3(0.2681167, 0.7907975, 0.1244477), Vector3(0.2818534, 0.4367986, 0.2814584), Vector3(0.2472161, 0.6840291, -0.1144454), Vector3(0.2609528, 0.3300302, 0.04256522), Vector3(0.2472161, 0.6840291, -0.1144454), Vector3(-0.01428496, 0.6840291, -0.09156692), Vector3(0.2609528, 0.3300302, 0.04256522), Vector3(0.2818534, 0.4367986, 0.2814584), Vector3(-0.000548264, 0.3300302, 0.06544369), Vector3(0.02035224, 0.4367986, 0.3043369), Vector3(-0.01428496, 0.6840291, -0.09156692), Vector3(-0.000548264, 0.3300302, 0.06544369), Vector3(-0.009097874, 0.3140617, -0.103989), Vector3(-0.006253838, 0.06620049, -0.0714817), Vector3(0.007104039, 0.3385353, 0.08119946), Vector3(0.009948074, 0.0906741, 0.1137068), Vector3(0.2561527, 0.3385353, 0.05941039), Vector3(0.2589967, 0.0906741, 0.09191775), Vector3(0.2399507, 0.3140617, -0.125778), Vector3(0.2427948, 0.06620049, -0.09327071), Vector3(0.2399507, 0.3140617, -0.125778), Vector3(-0.009097874, 0.3140617, -0.103989), Vector3(0.2427948, 0.06620049, -0.09327071), Vector3(0.2589967, 0.0906741, 0.09191775), Vector3(-0.006253838, 0.06620049, -0.0714817), Vector3(0.009948074, 0.0906741, 0.1137068), Vector3(-0.009097874, 0.3140617, -0.103989), Vector3(-0.006253838, 0.06620049, -0.0714817), Vector3(0.01814067, 0.5290982, 0.2001773), Vector3(-0.008542835, 0.314724, -0.1048158), Vector3(0.02432703, 0.4277281, 0.2708873), Vector3(-0.002356469, 0.2133539, -0.03410577), Vector3(0.2721304, 0.4277281, 0.2492071), Vector3(0.2454469, 0.2133539, -0.05578589), Vector3(0.2659441, 0.5290982, 0.1784971), Vector3(0.2392606, 0.314724, -0.1264958), Vector3(0.2659441, 0.5290982, 0.1784971), Vector3(0.01814067, 0.5290982, 0.2001773), Vector3(0.2392606, 0.314724, -0.1264958), Vector3(0.2454469, 0.2133539, -0.05578589), Vector3(-0.008542835, 0.314724, -0.1048158), Vector3(-0.002356469, 0.2133539, -0.03410577), Vector3(0.01814067, 0.5290982, 0.2001773), Vector3(-0.008542835, 0.314724, -0.1048158), Vector3(-0.265944, 0.5290982, 0.1784974), Vector3(-0.2392606, 0.314724, -0.1264957), Vector3(-0.2721303, 0.4277281, 0.2492073), Vector3(-0.2454469, 0.2133539, -0.05578565), Vector3(-0.0243268, 0.4277281, 0.2708873), Vector3(0.002356469, 0.2133539, -0.03410577), Vector3(-0.01814049, 0.5290982, 0.2001773), Vector3(0.008542716, 0.314724, -0.1048158), Vector3(-0.01814049, 0.5290982, 0.2001773), Vector3(-0.265944, 0.5290982, 0.1784974), Vector3(0.008542716, 0.314724, -0.1048158), Vector3(0.002356469, 0.2133539, -0.03410577), Vector3(-0.2392606, 0.314724, -0.1264957), Vector3(-0.2454469, 0.2133539, -0.05578565), Vector3(-0.265944, 0.5290982, 0.1784974), Vector3(-0.2392606, 0.314724, -0.1264957), Vector3(-0.2472162, 0.6840291, -0.1144452), Vector3(-0.2609528, 0.3300302, 0.0425654), Vector3(-0.2681165, 0.7907975, 0.124448), Vector3(-0.2818531, 0.4367986, 0.2814586), Vector3(-0.0066154, 0.7907975, 0.1473262), Vector3(-0.020352, 0.4367986, 0.3043369), Vector3(0.0142849, 0.6840291, -0.09156692), Vector3(0.000548315, 0.3300302, 0.06544369), Vector3(0.0142849, 0.6840291, -0.09156692), Vector3(-0.2472162, 0.6840291, -0.1144452), Vector3(0.000548315, 0.3300302, 0.06544369), Vector3(-0.020352, 0.4367986, 0.3043369), Vector3(-0.2609528, 0.3300302, 0.0425654), Vector3(-0.2818531, 0.4367986, 0.2814586), Vector3(-0.2472162, 0.6840291, -0.1144452), Vector3(-0.2609528, 0.3300302, 0.0425654), Vector3(-0.2430801, 0.125625, -0.09718048), Vector3(-0.2430801, -0.000624988, -0.09718054), Vector3(-0.2704252, 0.125625, 0.2153756), Vector3(-0.2704252, -0.000625026, 0.2153756), Vector3(-0.02013123, 0.125625, 0.2372733), Vector3(-0.02013123, -0.000625028, 0.2372733), Vector3(0.007213711, 0.125625, -0.07528269), Vector3(0.007213711, -0.000624991, -0.07528275), Vector3(0.007213711, 0.125625, -0.07528269), Vector3(-0.2430801, 0.125625, -0.09718048), Vector3(0.007213711, -0.000624991, -0.07528275), Vector3(-0.02013123, -0.000625028, 0.2372733), Vector3(-0.2430801, -0.000624988, -0.09718054), Vector3(-0.2704252, -0.000625026, 0.2153756), Vector3(-0.2430801, 0.125625, -0.09718048), Vector3(-0.2430801, -0.000624988, -0.09718054), Vector3(-0.2399508, 0.3140617, -0.1257779), Vector3(-0.2427948, 0.06620049, -0.09327054), Vector3(-0.2561526, 0.3385353, 0.05941063), Vector3(-0.2589967, 0.0906741, 0.09191799), Vector3(-0.007103979, 0.3385353, 0.08119946), Vector3(-0.009948015, 0.0906741, 0.1137068), Vector3(0.009097814, 0.3140617, -0.103989), Vector3(0.006253778, 0.06620049, -0.0714817), Vector3(0.009097814, 0.3140617, -0.103989), Vector3(-0.2399508, 0.3140617, -0.1257779), Vector3(0.006253778, 0.06620049, -0.0714817), Vector3(-0.009948015, 0.0906741, 0.1137068), Vector3(-0.2427948, 0.06620049, -0.09327054), Vector3(-0.2589967, 0.0906741, 0.09191799), Vector3(-0.2399508, 0.3140617, -0.1257779), Vector3(-0.2427948, 0.06620049, -0.09327054)});
std::vector<std::vector<int>> BONE_t({{0, 1, 2}, {1, 3, 2}, {4, 5, 6}, {5, 7, 6}, {4, 8, 2}, {8, 9, 2}, {10, 11, 12}, {11, 13, 12}, {6, 7, 14}, {7, 15, 14}, {2, 3, 4}, {3, 5, 4}, {16, 17, 18}, {17, 19, 18}, {20, 21, 22}, {21, 23, 22}, {20, 24, 18}, {24, 25, 18}, {26, 27, 28}, {27, 29, 28}, {22, 23, 30}, {23, 31, 30}, {18, 19, 20}, {19, 21, 20}, {32, 33, 34}, {33, 35, 34}, {36, 37, 38}, {37, 39, 38}, {36, 40, 34}, {40, 41, 34}, {42, 43, 44}, {43, 45, 44}, {38, 39, 46}, {39, 47, 46}, {34, 35, 36}, {35, 37, 36}, {48, 49, 50}, {49, 51, 50}, {52, 53, 54}, {53, 55, 54}, {52, 56, 50}, {56, 57, 50}, {58, 59, 60}, {59, 61, 60}, {54, 55, 62}, {55, 63, 62}, {50, 51, 52}, {51, 53, 52}, {64, 65, 66}, {65, 67, 66}, {68, 69, 70}, {69, 71, 70}, {68, 72, 66}, {72, 73, 66}, {74, 75, 76}, {75, 77, 76}, {70, 71, 78}, {71, 79, 78}, {66, 67, 68}, {67, 69, 68}, {80, 81, 82}, {81, 83, 82}, {84, 85, 86}, {85, 87, 86}, {84, 88, 82}, {88, 89, 82}, {90, 91, 92}, {91, 93, 92}, {86, 87, 94}, {87, 95, 94}, {82, 83, 84}, {83, 85, 84}, {96, 97, 98}, {97, 99, 98}, {100, 101, 102}, {101, 103, 102}, {100, 104, 98}, {104, 105, 98}, {106, 107, 108}, {107, 109, 108}, {102, 103, 110}, {103, 111, 110}, {98, 99, 100}, {99, 101, 100}, {112, 113, 114}, {113, 115, 114}, {116, 117, 118}, {117, 119, 118}, {116, 120, 114}, {120, 121, 114}, {122, 123, 124}, {123, 125, 124}, {118, 119, 126}, {119, 127, 126}, {114, 115, 116}, {115, 117, 116}, {128, 129, 130}, {129, 131, 130}, {132, 133, 134}, {133, 135, 134}, {132, 136, 130}, {136, 137, 130}, {138, 139, 140}, {139, 141, 140}, {134, 135, 142}, {135, 143, 142}, {130, 131, 132}, {131, 133, 132}, {144, 145, 146}, {145, 147, 146}, {148, 149, 150}, {149, 151, 150}, {148, 152, 146}, {152, 153, 146}, {154, 155, 156}, {155, 157, 156}, {150, 151, 158}, {151, 159, 158}, {146, 147, 148}, {147, 149, 148}, {160, 161, 162}, {161, 163, 162}, {164, 165, 166}, {165, 167, 166}, {164, 168, 162}, {168, 169, 162}, {170, 171, 172}, {171, 173, 172}, {174, 175, 160}, {175, 161, 160}, {162, 163, 164}, {163, 165, 164}, {176, 177, 178}, {177, 179, 178}, {180, 181, 182}, {181, 183, 182}, {180, 184, 178}, {184, 185, 178}, {186, 187, 188}, {187, 189, 188}, {190, 191, 176}, {191, 177, 176}, {178, 179, 180}, {179, 181, 180}, {192, 193, 194}, {192, 194, 195}, {196, 197, 198}, {196, 198, 199}, {197, 193, 200}, {197, 200, 201}, {202, 194, 196}, {202, 196, 203}, {194, 193, 197}, {194, 197, 196}, {204, 205, 206}, {204, 206, 207}, {208, 209, 210}, {209, 211, 210}, {212, 213, 214}, {213, 215, 214}, {212, 216, 210}, {216, 217, 210}, {218, 219, 220}, {219, 221, 220}, {214, 215, 222}, {215, 223, 222}, {210, 211, 212}, {211, 213, 212}, {224, 225, 226}, {225, 227, 226}, {228, 229, 230}, {229, 231, 230}, {228, 232, 226}, {232, 233, 226}, {234, 235, 236}, {235, 237, 236}, {230, 231, 238}, {231, 239, 238}, {226, 227, 228}, {227, 229, 228}, {240, 241, 242}, {241, 243, 242}, {244, 245, 246}, {245, 247, 246}, {244, 248, 242}, {248, 249, 242}, {250, 251, 252}, {251, 253, 252}, {246, 247, 254}, {247, 255, 254}, {242, 243, 244}, {243, 245, 244}, {256, 257, 258}, {257, 259, 258}, {260, 261, 262}, {261, 263, 262}, {260, 264, 258}, {264, 265, 258}, {266, 267, 268}, {267, 269, 268}, {262, 263, 270}, {263, 271, 270}, {258, 259, 260}, {259, 261, 260}, {272, 273, 274}, {273, 275, 274}, {276, 277, 278}, {277, 279, 278}, {276, 280, 274}, {280, 281, 274}, {282, 283, 284}, {283, 285, 284}, {278, 279, 286}, {279, 287, 286}, {274, 275, 276}, {275, 277, 276}, {288, 289, 290}, {289, 291, 290}, {292, 293, 294}, {293, 295, 294}, {292, 296, 290}, {296, 297, 290}, {298, 299, 300}, {299, 301, 300}, {294, 295, 302}, {295, 303, 302}, {290, 291, 292}, {291, 293, 292}, {304, 305, 306}, {305, 307, 306}, {308, 309, 310}, {309, 311, 310}, {308, 312, 306}, {312, 313, 306}, {314, 315, 316}, {315, 317, 316}, {310, 311, 318}, {311, 319, 318}, {306, 307, 308}, {307, 309, 308}, {320, 321, 322}, {321, 323, 322}, {324, 325, 326}, {325, 327, 326}, {324, 328, 322}, {328, 329, 322}, {330, 331, 332}, {331, 333, 332}, {326, 327, 334}, {327, 335, 334}, {322, 323, 324}, {323, 325, 324}, {336, 337, 338}, {337, 339, 338}, {340, 341, 342}, {341, 343, 342}, {340, 344, 338}, {344, 345, 338}, {346, 347, 348}, {347, 349, 348}, {342, 343, 350}, {343, 351, 350}, {338, 339, 340}, {339, 341, 340}, {352, 353, 354}, {353, 355, 354}, {356, 357, 358}, {357, 359, 358}, {356, 360, 354}, {360, 361, 354}, {362, 363, 364}, {363, 365, 364}, {358, 359, 366}, {359, 367, 366}, {354, 355, 356}, {355, 357, 356}, {368, 369, 370}, {369, 371, 370}, {372, 373, 374}, {373, 375, 374}, {372, 376, 370}, {376, 377, 370}, {378, 379, 380}, {379, 381, 380}, {374, 375, 382}, {375, 383, 382}, {370, 371, 372}, {371, 373, 372}, {384, 385, 386}, {385, 387, 386}, {388, 389, 390}, {389, 391, 390}, {388, 392, 386}, {392, 393, 386}, {394, 395, 396}, {395, 397, 396}, {390, 391, 398}, {391, 399, 398}, {386, 387, 388}, {387, 389, 388}, {400, 401, 402}, {401, 403, 402}, {404, 405, 406}, {405, 407, 406}, {404, 408, 402}, {408, 409, 402}, {410, 411, 412}, {411, 413, 412}, {406, 407, 414}, {407, 415, 414}, {402, 403, 404}, {403, 405, 404}, {416, 417, 418}, {417, 419, 418}, {420, 421, 422}, {421, 423, 422}, {420, 424, 418}, {424, 425, 418}, {426, 427, 428}, {427, 429, 428}, {422, 423, 430}, {423, 431, 430}, {418, 419, 420}, {419, 421, 420}, {432, 433, 434}, {433, 435, 434}, {436, 437, 438}, {437, 439, 438}, {436, 440, 434}, {440, 441, 434}, {442, 443, 444}, {443, 445, 444}, {438, 439, 446}, {439, 447, 446}, {434, 435, 436}, {435, 437, 436}, {448, 449, 450}, {449, 451, 450}, {452, 453, 454}, {453, 455, 454}, {452, 456, 450}, {456, 457, 450}, {458, 459, 460}, {459, 461, 460}, {454, 455, 462}, {455, 463, 462}, {450, 451, 452}, {451, 453, 452}, {464, 465, 466}, {465, 467, 466}, {468, 469, 470}, {469, 471, 470}, {468, 472, 466}, {472, 473, 466}, {474, 475, 476}, {475, 477, 476}, {470, 471, 478}, {471, 479, 478}, {466, 467, 468}, {467, 469, 468}, {480, 481, 482}, {481, 483, 482}, {484, 485, 486}, {485, 487, 486}, {484, 488, 482}, {488, 489, 482}, {490, 491, 492}, {491, 493, 492}, {486, 487, 494}, {487, 495, 494}, {482, 483, 484}, {483, 485, 484}, {496, 497, 498}, {497, 499, 498}, {500, 501, 502}, {501, 503, 502}, {500, 504, 498}, {504, 505, 498}, {506, 507, 508}, {507, 509, 508}, {502, 503, 510}, {503, 511, 510}, {498, 499, 500}, {499, 501, 500}, {512, 513, 514}, {513, 515, 514}, {516, 517, 518}, {517, 519, 518}, {516, 520, 514}, {520, 521, 514}, {522, 523, 524}, {523, 525, 524}, {518, 519, 526}, {519, 527, 526}, {514, 515, 516}, {515, 517, 516}, {528, 529, 530}, {529, 531, 530}, {532, 533, 534}, {533, 535, 534}, {532, 536, 530}, {536, 537, 530}, {538, 539, 540}, {539, 541, 540}, {534, 535, 542}, {535, 543, 542}, {530, 531, 532}, {531, 533, 532}});
std::vector<Vector2> BONE_tex({Vector2(0.30469, 0.32812), Vector2(0.30469, 0.26562), Vector2(0.34375, 0.32812), Vector2(0.30469, 0.26562), Vector2(0.34375, 0.26562), Vector2(0.34375, 0.32812), Vector2(0.375, 0.32812), Vector2(0.375, 0.26562), Vector2(0.41406, 0.32812), Vector2(0.375, 0.26562), Vector2(0.41406, 0.26562), Vector2(0.41406, 0.32812), Vector2(0.375, 0.32812), Vector2(0.375, 0.40625), Vector2(0.34375, 0.32812), Vector2(0.375, 0.40625), Vector2(0.34375, 0.40625), Vector2(0.34375, 0.32812), Vector2(0.40625, 0.40625), Vector2(0.40625, 0.32812), Vector2(0.375, 0.40625), Vector2(0.40625, 0.32812), Vector2(0.375, 0.32812), Vector2(0.375, 0.40625), Vector2(0.41406, 0.32812), Vector2(0.41406, 0.26562), Vector2(0.44531, 0.32812), Vector2(0.41406, 0.26562), Vector2(0.44531, 0.26562), Vector2(0.44531, 0.32812), Vector2(0.34375, 0.32812), Vector2(0.34375, 0.26562), Vector2(0.375, 0.32812), Vector2(0.34375, 0.26562), Vector2(0.375, 0.26562), Vector2(0.375, 0.32812), Vector2(0.0, 0.90625), Vector2(0.0, 0.8125), Vector2(0.04687994, 0.90625), Vector2(0.0, 0.8125), Vector2(0.04687994, 0.8125), Vector2(0.04687994, 0.90625), Vector2(0.10938, 0.90625), Vector2(0.10938, 0.8125), Vector2(0.15625, 0.90625), Vector2(0.10938, 0.8125), Vector2(0.15625, 0.8125), Vector2(0.15625, 0.90625), Vector2(0.10938, 0.90625), Vector2(0.10938, 1.0), Vector2(0.04687994, 0.90625), Vector2(0.10938, 1.0), Vector2(0.04687994, 1.0), Vector2(0.04687994, 0.90625), Vector2(0.17188, 1.0), Vector2(0.17188, 0.90625), Vector2(0.10938, 1.0), Vector2(0.17188, 0.90625), Vector2(0.10938, 0.90625), Vector2(0.10938, 1.0), Vector2(0.15625, 0.90625), Vector2(0.15625, 0.8125), Vector2(0.21875, 0.90625), Vector2(0.15625, 0.8125), Vector2(0.21875, 0.8125), Vector2(0.21875, 0.90625), Vector2(0.04687994, 0.90625), Vector2(0.04687994, 0.8125), Vector2(0.10938, 0.90625), Vector2(0.04687994, 0.8125), Vector2(0.10938, 0.8125), Vector2(0.10938, 0.90625), Vector2(0.0, 0.75), Vector2(0.0, 0.71875), Vector2(0.03125, 0.75), Vector2(0.0, 0.71875), Vector2(0.03125, 0.71875), Vector2(0.03125, 0.75), Vector2(0.09375, 0.75), Vector2(0.09375, 0.71875), Vector2(0.125, 0.75), Vector2(0.09375, 0.71875), Vector2(0.125, 0.71875), Vector2(0.125, 0.75), Vector2(0.09375, 0.75), Vector2(0.09375, 0.8125), Vector2(0.03125, 0.75), Vector2(0.09375, 0.8125), Vector2(0.03125, 0.8125), Vector2(0.03125, 0.75), Vector2(0.15625, 0.8125), Vector2(0.15625, 0.75), Vector2(0.09375, 0.8125), Vector2(0.15625, 0.75), Vector2(0.09375, 0.75), Vector2(0.09375, 0.8125), Vector2(0.125, 0.75), Vector2(0.125, 0.71875), Vector2(0.1875, 0.75), Vector2(0.125, 0.71875), Vector2(0.1875, 0.71875), Vector2(0.1875, 0.75), Vector2(0.03125, 0.75), Vector2(0.03125, 0.71875), Vector2(0.09375, 0.75), Vector2(0.03125, 0.71875), Vector2(0.09375, 0.71875), Vector2(0.09375, 0.75), Vector2(0.0, 0.65625), Vector2(0.0, 0.57812), Vector2(0.03125, 0.65625), Vector2(0.0, 0.57812), Vector2(0.03125, 0.57812), Vector2(0.03125, 0.65625), Vector2(0.07811999, 0.65625), Vector2(0.07811999, 0.57812), Vector2(0.10938, 0.65625), Vector2(0.07811999, 0.57812), Vector2(0.10938, 0.57812), Vector2(0.10938, 0.65625), Vector2(0.07811999, 0.65625), Vector2(0.07811999, 0.71875), Vector2(0.03125, 0.65625), Vector2(0.07811999, 0.71875), Vector2(0.03125, 0.71875), Vector2(0.03125, 0.65625), Vector2(0.125, 0.71875), Vector2(0.125, 0.65625), Vector2(0.07811999, 0.71875), Vector2(0.125, 0.65625), Vector2(0.07811999, 0.65625), Vector2(0.07811999, 0.71875), Vector2(0.10938, 0.65625), Vector2(0.10938, 0.57812), Vector2(0.15625, 0.65625), Vector2(0.10938, 0.57812), Vector2(0.15625, 0.57812), Vector2(0.15625, 0.65625), Vector2(0.03125, 0.65625), Vector2(0.03125, 0.57812), Vector2(0.07811999, 0.65625), Vector2(0.03125, 0.57812), Vector2(0.07811999, 0.57812), Vector2(0.07811999, 0.65625), Vector2(0.21875, 0.9375), Vector2(0.21875, 0.875), Vector2(0.25, 0.9375), Vector2(0.21875, 0.875), Vector2(0.25, 0.875), Vector2(0.25, 0.9375), Vector2(0.28125, 0.9375), Vector2(0.28125, 0.875), Vector2(0.3125, 0.9375), Vector2(0.28125, 0.875), Vector2(0.3125, 0.875), Vector2(0.3125, 0.9375), Vector2(0.28125, 0.9375), Vector2(0.28125, 1.0), Vector2(0.25, 0.9375), Vector2(0.28125, 1.0), Vector2(0.25, 1.0), Vector2(0.25, 0.9375), Vector2(0.3125, 1.0), Vector2(0.3125, 0.9375), Vector2(0.28125, 1.0), Vector2(0.3125, 0.9375), Vector2(0.28125, 0.9375), Vector2(0.28125, 1.0), Vector2(0.3125, 0.9375), Vector2(0.3125, 0.875), Vector2(0.34375, 0.9375), Vector2(0.3125, 0.875), Vector2(0.34375, 0.875), Vector2(0.34375, 0.9375), Vector2(0.25, 0.9375), Vector2(0.25, 0.875), Vector2(0.28125, 0.9375), Vector2(0.25, 0.875), Vector2(0.28125, 0.875), Vector2(0.28125, 0.9375), Vector2(0.15625, 0.71875), Vector2(0.15625, 0.64062), Vector2(0.2031199, 0.71875), Vector2(0.15625, 0.64062), Vector2(0.2031199, 0.64062), Vector2(0.2031199, 0.71875), Vector2(0.24219, 0.71875), Vector2(0.24219, 0.64062), Vector2(0.28906, 0.71875), Vector2(0.24219, 0.64062), Vector2(0.28906, 0.64062), Vector2(0.28906, 0.71875), Vector2(0.24219, 0.71875), Vector2(0.24219, 0.8125), Vector2(0.2031199, 0.71875), Vector2(0.24219, 0.8125), Vector2(0.2031199, 0.8125), Vector2(0.2031199, 0.71875), Vector2(0.28125, 0.8125), Vector2(0.28125, 0.71875), Vector2(0.24219, 0.8125), Vector2(0.28125, 0.71875), Vector2(0.24219, 0.71875), Vector2(0.24219, 0.8125), Vector2(0.28906, 0.71875), Vector2(0.28906, 0.64062), Vector2(0.32812, 0.71875), Vector2(0.28906, 0.64062), Vector2(0.32812, 0.64062), Vector2(0.32812, 0.71875), Vector2(0.2031199, 0.71875), Vector2(0.2031199, 0.64062), Vector2(0.24219, 0.71875), Vector2(0.2031199, 0.64062), Vector2(0.24219, 0.64062), Vector2(0.24219, 0.71875), Vector2(0.30469, 0.45312), Vector2(0.30469, 0.40625), Vector2(0.32812, 0.45312), Vector2(0.30469, 0.40625), Vector2(0.32812, 0.40625), Vector2(0.32812, 0.45312), Vector2(0.33594, 0.45312), Vector2(0.33594, 0.40625), Vector2(0.35938, 0.45312), Vector2(0.33594, 0.40625), Vector2(0.35938, 0.40625), Vector2(0.35938, 0.45312), Vector2(0.33594, 0.45312), Vector2(0.33594, 0.5), Vector2(0.32812, 0.45312), Vector2(0.33594, 0.5), Vector2(0.32812, 0.5), Vector2(0.32812, 0.45312), Vector2(0.34375, 0.5), Vector2(0.34375, 0.45312), Vector2(0.33594, 0.5), Vector2(0.34375, 0.45312), Vector2(0.33594, 0.45312), Vector2(0.33594, 0.5), Vector2(0.35938, 0.45312), Vector2(0.35938, 0.40625), Vector2(0.36719, 0.45312), Vector2(0.35938, 0.40625), Vector2(0.36719, 0.40625), Vector2(0.36719, 0.45312), Vector2(0.32812, 0.45312), Vector2(0.32812, 0.40625), Vector2(0.33594, 0.45312), Vector2(0.32812, 0.40625), Vector2(0.33594, 0.40625), Vector2(0.33594, 0.45312), Vector2(0.375, 0.82812), Vector2(0.375, 0.8125), Vector2(0.40625, 0.82812), Vector2(0.375, 0.8125), Vector2(0.40625, 0.8125), Vector2(0.40625, 0.82812), Vector2(0.45312, 0.82812), Vector2(0.45312, 0.8125), Vector2(0.48438, 0.82812), Vector2(0.45312, 0.8125), Vector2(0.48438, 0.8125), Vector2(0.48438, 0.82812), Vector2(0.45312, 0.82812), Vector2(0.45312, 0.89062), Vector2(0.40625, 0.82812), Vector2(0.45312, 0.89062), Vector2(0.40625, 0.89062), Vector2(0.40625, 0.82812), Vector2(0.5, 0.89062), Vector2(0.5, 0.82812), Vector2(0.45312, 0.89062), Vector2(0.5, 0.82812), Vector2(0.45312, 0.82812), Vector2(0.45312, 0.89062), Vector2(0.48438, 0.82812), Vector2(0.48438, 0.8125), Vector2(0.53125, 0.82812), Vector2(0.48438, 0.8125), Vector2(0.53125, 0.8125), Vector2(0.53125, 0.82812), Vector2(0.40625, 0.82812), Vector2(0.40625, 0.8125), Vector2(0.45312, 0.82812), Vector2(0.40625, 0.8125), Vector2(0.45312, 0.8125), Vector2(0.45312, 0.82812), Vector2(0.34375, 0.5), Vector2(0.34375, 0.46875), Vector2(0.39844, 0.5), Vector2(0.34375, 0.46875), Vector2(0.39844, 0.46875), Vector2(0.39844, 0.5), Vector2(0.41406, 0.5), Vector2(0.41406, 0.46875), Vector2(0.46875, 0.5), Vector2(0.41406, 0.46875), Vector2(0.46875, 0.46875), Vector2(0.46875, 0.5), Vector2(0.41406, 0.5), Vector2(0.41406, 0.60938), Vector2(0.39844, 0.5), Vector2(0.41406, 0.60938), Vector2(0.39844, 0.60938), Vector2(0.39844, 0.5), Vector2(0.42969, 0.60938), Vector2(0.42969, 0.5), Vector2(0.41406, 0.60938), Vector2(0.42969, 0.5), Vector2(0.41406, 0.5), Vector2(0.41406, 0.60938), Vector2(0.46875, 0.5), Vector2(0.46875, 0.46875), Vector2(0.48438, 0.5), Vector2(0.46875, 0.46875), Vector2(0.48438, 0.46875), Vector2(0.48438, 0.5), Vector2(0.39844, 0.5), Vector2(0.39844, 0.46875), Vector2(0.41406, 0.5), Vector2(0.39844, 0.46875), Vector2(0.41406, 0.46875), Vector2(0.41406, 0.5), Vector2(0.40625, 0.26562), Vector2(0.40625, 0.25), Vector2(0.44531, 0.26562), Vector2(0.40625, 0.25), Vector2(0.44531, 0.25), Vector2(0.44531, 0.26562), Vector2(0.45312, 0.26562), Vector2(0.45312, 0.25), Vector2(0.49219, 0.26562), Vector2(0.45312, 0.25), Vector2(0.49219, 0.25), Vector2(0.49219, 0.26562), Vector2(0.45312, 0.26562), Vector2(0.45312, 0.34375), Vector2(0.44531, 0.26562), Vector2(0.45312, 0.34375), Vector2(0.44531, 0.34375), Vector2(0.44531, 0.26562), Vector2(0.46094, 0.34375), Vector2(0.46094, 0.26562), Vector2(0.45312, 0.34375), Vector2(0.46094, 0.26562), Vector2(0.45312, 0.26562), Vector2(0.45312, 0.34375), Vector2(0.49219, 0.26562), Vector2(0.49219, 0.25), Vector2(0.5, 0.26562), Vector2(0.49219, 0.25), Vector2(0.5, 0.25), Vector2(0.5, 0.26562), Vector2(0.44531, 0.26562), Vector2(0.44531, 0.25), Vector2(0.45312, 0.26562), Vector2(0.44531, 0.25), Vector2(0.45312, 0.25), Vector2(0.45312, 0.26562), Vector2(0.46875, 0.5), Vector2(0.46875, 0.46875), Vector2(0.41406, 0.5), Vector2(0.46875, 0.46875), Vector2(0.41406, 0.46875), Vector2(0.41406, 0.5), Vector2(0.39844, 0.5), Vector2(0.39844, 0.46875), Vector2(0.34375, 0.5), Vector2(0.39844, 0.46875), Vector2(0.34375, 0.46875), Vector2(0.34375, 0.5), Vector2(0.39844, 0.5), Vector2(0.39844, 0.60938), Vector2(0.41406, 0.5), Vector2(0.39844, 0.60938), Vector2(0.41406, 0.60938), Vector2(0.41406, 0.5), Vector2(0.41406, 0.60938), Vector2(0.41406, 0.5), Vector2(0.42969, 0.60938), Vector2(0.41406, 0.5), Vector2(0.42969, 0.5), Vector2(0.42969, 0.60938), Vector2(0.48438, 0.5), Vector2(0.48438, 0.46875), Vector2(0.46875, 0.5), Vector2(0.48438, 0.46875), Vector2(0.46875, 0.46875), Vector2(0.46875, 0.5), Vector2(0.41406, 0.5), Vector2(0.41406, 0.46875), Vector2(0.39844, 0.5), Vector2(0.41406, 0.46875), Vector2(0.39844, 0.46875), Vector2(0.39844, 0.5), Vector2(0.49219, 0.26562), Vector2(0.49219, 0.25), Vector2(0.45312, 0.26562), Vector2(0.49219, 0.25), Vector2(0.45312, 0.25), Vector2(0.45312, 0.26562), Vector2(0.44531, 0.26562), Vector2(0.44531, 0.25), Vector2(0.40625, 0.26562), Vector2(0.44531, 0.25), Vector2(0.40625, 0.25), Vector2(0.40625, 0.26562), Vector2(0.44531, 0.26562), Vector2(0.44531, 0.34375), Vector2(0.45312, 0.26562), Vector2(0.44531, 0.34375), Vector2(0.45312, 0.34375), Vector2(0.45312, 0.26562), Vector2(0.45312, 0.34375), Vector2(0.45312, 0.26562), Vector2(0.46094, 0.34375), Vector2(0.45312, 0.26562), Vector2(0.46094, 0.26562), Vector2(0.46094, 0.34375), Vector2(0.5, 0.26562), Vector2(0.5, 0.25), Vector2(0.49219, 0.26562), Vector2(0.5, 0.25), Vector2(0.49219, 0.25), Vector2(0.49219, 0.26562), Vector2(0.45312, 0.26562), Vector2(0.45312, 0.25), Vector2(0.44531, 0.26562), Vector2(0.45312, 0.25), Vector2(0.44531, 0.25), Vector2(0.44531, 0.26562), Vector2(0.70312, 0.84375), Vector2(0.64844, 0.875), Vector2(0.64844, 0.78125), Vector2(0.70312, 0.84375), Vector2(0.64844, 0.78125), Vector2(0.69408, 0.78125), Vector2(0.59375, 0.78125), Vector2(0.59375, 0.875), Vector2(0.53906, 0.84375), Vector2(0.59375, 0.78125), Vector2(0.53906, 0.84375), Vector2(0.54862, 0.78125), Vector2(0.59375, 0.875), Vector2(0.64844, 0.875), Vector2(0.63672, 1.0), Vector2(0.59375, 0.875), Vector2(0.63672, 1.0), Vector2(0.60547, 1.0), Vector2(0.63672, 0.6875), Vector2(0.64844, 0.78125), Vector2(0.59375, 0.78125), Vector2(0.63672, 0.6875), Vector2(0.59375, 0.78125), Vector2(0.60547, 0.6875), Vector2(0.64844, 0.78125), Vector2(0.64844, 0.875), Vector2(0.59375, 0.875), Vector2(0.64844, 0.78125), Vector2(0.59375, 0.875), Vector2(0.59375, 0.78125), Vector2(0.69531, 0.96875), Vector2(0.66406, 0.96875), Vector2(0.66406, 0.90625), Vector2(0.69531, 0.96875), Vector2(0.66406, 0.90625), Vector2(0.69531, 0.90625), Vector2(0.30469, 0.45312), Vector2(0.30469, 0.40625), Vector2(0.32812, 0.45312), Vector2(0.30469, 0.40625), Vector2(0.32812, 0.40625), Vector2(0.32812, 0.45312), Vector2(0.33594, 0.45312), Vector2(0.33594, 0.40625), Vector2(0.35938, 0.45312), Vector2(0.33594, 0.40625), Vector2(0.35938, 0.40625), Vector2(0.35938, 0.45312), Vector2(0.33594, 0.45312), Vector2(0.33594, 0.5), Vector2(0.32812, 0.45312), Vector2(0.33594, 0.5), Vector2(0.32812, 0.5), Vector2(0.32812, 0.45312), Vector2(0.34375, 0.5), Vector2(0.34375, 0.45312), Vector2(0.33594, 0.5), Vector2(0.34375, 0.45312), Vector2(0.33594, 0.45312), Vector2(0.33594, 0.5), Vector2(0.35938, 0.45312), Vector2(0.35938, 0.40625), Vector2(0.36719, 0.45312), Vector2(0.35938, 0.40625), Vector2(0.36719, 0.40625), Vector2(0.36719, 0.45312), Vector2(0.32812, 0.45312), Vector2(0.32812, 0.40625), Vector2(0.33594, 0.45312), Vector2(0.32812, 0.40625), Vector2(0.33594, 0.40625), Vector2(0.33594, 0.45312), Vector2(0.1875, 0.15625), Vector2(0.1875, 0.09375), Vector2(0.1953099, 0.15625), Vector2(0.1875, 0.09375), Vector2(0.1953099, 0.09375), Vector2(0.1953099, 0.15625), Vector2(0.25781, 0.15625), Vector2(0.25781, 0.09375), Vector2(0.26562, 0.15625), Vector2(0.25781, 0.09375), Vector2(0.26562, 0.09375), Vector2(0.26562, 0.15625), Vector2(0.25781, 0.15625), Vector2(0.25781, 0.17188), Vector2(0.1953099, 0.15625), Vector2(0.25781, 0.17188), Vector2(0.1953099, 0.17188), Vector2(0.1953099, 0.15625), Vector2(0.32031, 0.17188), Vector2(0.32031, 0.15625), Vector2(0.25781, 0.17188), Vector2(0.32031, 0.15625), Vector2(0.25781, 0.15625), Vector2(0.25781, 0.17188), Vector2(0.26562, 0.15625), Vector2(0.26562, 0.09375), Vector2(0.32812, 0.15625), Vector2(0.26562, 0.09375), Vector2(0.32812, 0.09375), Vector2(0.32812, 0.15625), Vector2(0.1953099, 0.15625), Vector2(0.1953099, 0.09375), Vector2(0.25781, 0.15625), Vector2(0.1953099, 0.09375), Vector2(0.25781, 0.09375), Vector2(0.25781, 0.15625), Vector2(0.40625, 0.4375), Vector2(0.40625, 0.39062), Vector2(0.42188, 0.4375), Vector2(0.40625, 0.39062), Vector2(0.42188, 0.39062), Vector2(0.42188, 0.4375), Vector2(0.47656, 0.4375), Vector2(0.47656, 0.39062), Vector2(0.49219, 0.4375), Vector2(0.47656, 0.39062), Vector2(0.49219, 0.39062), Vector2(0.49219, 0.4375), Vector2(0.47656, 0.4375), Vector2(0.47656, 0.46875), Vector2(0.42188, 0.4375), Vector2(0.47656, 0.46875), Vector2(0.42188, 0.46875), Vector2(0.42188, 0.4375), Vector2(0.53125, 0.46875), Vector2(0.53125, 0.4375), Vector2(0.47656, 0.46875), Vector2(0.53125, 0.4375), Vector2(0.47656, 0.4375), Vector2(0.47656, 0.46875), Vector2(0.49219, 0.4375), Vector2(0.49219, 0.39062), Vector2(0.54688, 0.4375), Vector2(0.49219, 0.39062), Vector2(0.54688, 0.39062), Vector2(0.54688, 0.4375), Vector2(0.42188, 0.4375), Vector2(0.42188, 0.39062), Vector2(0.47656, 0.4375), Vector2(0.42188, 0.39062), Vector2(0.47656, 0.39062), Vector2(0.47656, 0.4375), Vector2(0.39062, 0.71875), Vector2(0.39062, 0.67188), Vector2(0.41406, 0.71875), Vector2(0.39062, 0.67188), Vector2(0.41406, 0.67188), Vector2(0.41406, 0.71875), Vector2(0.46094, 0.71875), Vector2(0.46094, 0.67188), Vector2(0.48438, 0.71875), Vector2(0.46094, 0.67188), Vector2(0.48438, 0.67188), Vector2(0.48438, 0.71875), Vector2(0.46094, 0.71875), Vector2(0.46094, 0.76562), Vector2(0.41406, 0.71875), Vector2(0.46094, 0.76562), Vector2(0.41406, 0.76562), Vector2(0.41406, 0.71875), Vector2(0.50781, 0.76562), Vector2(0.50781, 0.71875), Vector2(0.46094, 0.76562), Vector2(0.50781, 0.71875), Vector2(0.46094, 0.71875), Vector2(0.46094, 0.76562), Vector2(0.48438, 0.71875), Vector2(0.48438, 0.67188), Vector2(0.53125, 0.71875), Vector2(0.48438, 0.67188), Vector2(0.53125, 0.67188), Vector2(0.53125, 0.71875), Vector2(0.41406, 0.71875), Vector2(0.41406, 0.67188), Vector2(0.46094, 0.71875), Vector2(0.41406, 0.67188), Vector2(0.46094, 0.67188), Vector2(0.46094, 0.71875), Vector2(0.39062, 0.1406199), Vector2(0.39062, 0.10938), Vector2(0.42188, 0.1406199), Vector2(0.39062, 0.10938), Vector2(0.42188, 0.10938), Vector2(0.42188, 0.1406199), Vector2(0.46094, 0.1406199), Vector2(0.46094, 0.10938), Vector2(0.49219, 0.1406199), Vector2(0.46094, 0.10938), Vector2(0.49219, 0.10938), Vector2(0.49219, 0.1406199), Vector2(0.46094, 0.1406199), Vector2(0.46094, 0.2031199), Vector2(0.42188, 0.1406199), Vector2(0.46094, 0.2031199), Vector2(0.42188, 0.2031199), Vector2(0.42188, 0.1406199), Vector2(0.5, 0.2031199), Vector2(0.5, 0.1406199), Vector2(0.46094, 0.2031199), Vector2(0.5, 0.1406199), Vector2(0.46094, 0.1406199), Vector2(0.46094, 0.2031199), Vector2(0.49219, 0.1406199), Vector2(0.49219, 0.10938), Vector2(0.53125, 0.1406199), Vector2(0.49219, 0.10938), Vector2(0.53125, 0.10938), Vector2(0.53125, 0.1406199), Vector2(0.42188, 0.1406199), Vector2(0.42188, 0.10938), Vector2(0.46094, 0.1406199), Vector2(0.42188, 0.10938), Vector2(0.46094, 0.10938), Vector2(0.46094, 0.1406199), Vector2(0.39062, 0.71875), Vector2(0.39062, 0.67188), Vector2(0.41406, 0.71875), Vector2(0.39062, 0.67188), Vector2(0.41406, 0.67188), Vector2(0.41406, 0.71875), Vector2(0.46094, 0.71875), Vector2(0.46094, 0.67188), Vector2(0.48438, 0.71875), Vector2(0.46094, 0.67188), Vector2(0.48438, 0.67188), Vector2(0.48438, 0.71875), Vector2(0.46094, 0.71875), Vector2(0.46094, 0.76562), Vector2(0.41406, 0.71875), Vector2(0.46094, 0.76562), Vector2(0.41406, 0.76562), Vector2(0.41406, 0.71875), Vector2(0.50781, 0.76562), Vector2(0.50781, 0.71875), Vector2(0.46094, 0.76562), Vector2(0.50781, 0.71875), Vector2(0.46094, 0.71875), Vector2(0.46094, 0.76562), Vector2(0.48438, 0.71875), Vector2(0.48438, 0.67188), Vector2(0.53125, 0.71875), Vector2(0.48438, 0.67188), Vector2(0.53125, 0.67188), Vector2(0.53125, 0.71875), Vector2(0.41406, 0.71875), Vector2(0.41406, 0.67188), Vector2(0.46094, 0.71875), Vector2(0.41406, 0.67188), Vector2(0.46094, 0.67188), Vector2(0.46094, 0.71875), Vector2(0.42969, 0.64062), Vector2(0.42969, 0.59375), Vector2(0.44531, 0.64062), Vector2(0.42969, 0.59375), Vector2(0.44531, 0.59375), Vector2(0.44531, 0.64062), Vector2(0.48438, 0.64062), Vector2(0.48438, 0.59375), Vector2(0.5, 0.64062), Vector2(0.48438, 0.59375), Vector2(0.5, 0.59375), Vector2(0.5, 0.64062), Vector2(0.48438, 0.64062), Vector2(0.48438, 0.67188), Vector2(0.44531, 0.64062), Vector2(0.48438, 0.67188), Vector2(0.44531, 0.67188), Vector2(0.44531, 0.64062), Vector2(0.52344, 0.67188), Vector2(0.52344, 0.64062), Vector2(0.48438, 0.67188), Vector2(0.52344, 0.64062), Vector2(0.48438, 0.64062), Vector2(0.48438, 0.67188), Vector2(0.5, 0.64062), Vector2(0.5, 0.59375), Vector2(0.53906, 0.64062), Vector2(0.5, 0.59375), Vector2(0.53906, 0.59375), Vector2(0.53906, 0.64062), Vector2(0.44531, 0.64062), Vector2(0.44531, 0.59375), Vector2(0.48438, 0.64062), Vector2(0.44531, 0.59375), Vector2(0.48438, 0.59375), Vector2(0.48438, 0.64062), Vector2(0.11719, 0.5625), Vector2(0.11719, 0.5), Vector2(0.15625, 0.5625), Vector2(0.11719, 0.5), Vector2(0.15625, 0.5), Vector2(0.15625, 0.5625), Vector2(0.1875, 0.5625), Vector2(0.1875, 0.5), Vector2(0.2265599, 0.5625), Vector2(0.1875, 0.5), Vector2(0.2265599, 0.5), Vector2(0.2265599, 0.5625), Vector2(0.1875, 0.5625), Vector2(0.1875, 0.64062), Vector2(0.15625, 0.5625), Vector2(0.1875, 0.64062), Vector2(0.15625, 0.64062), Vector2(0.15625, 0.5625), Vector2(0.21875, 0.64062), Vector2(0.21875, 0.5625), Vector2(0.1875, 0.64062), Vector2(0.21875, 0.5625), Vector2(0.1875, 0.5625), Vector2(0.1875, 0.64062), Vector2(0.2265599, 0.5625), Vector2(0.2265599, 0.5), Vector2(0.25781, 0.5625), Vector2(0.2265599, 0.5), Vector2(0.25781, 0.5), Vector2(0.25781, 0.5625), Vector2(0.15625, 0.5625), Vector2(0.15625, 0.5), Vector2(0.1875, 0.5625), Vector2(0.15625, 0.5), Vector2(0.1875, 0.5), Vector2(0.1875, 0.5625), Vector2(0.0, 0.5), Vector2(0.0, 0.45312), Vector2(0.03905999, 0.5), Vector2(0.0, 0.45312), Vector2(0.03905999, 0.45312), Vector2(0.03905999, 0.5), Vector2(0.0625, 0.5), Vector2(0.0625, 0.45312), Vector2(0.1015599, 0.5), Vector2(0.0625, 0.45312), Vector2(0.1015599, 0.45312), Vector2(0.1015599, 0.5), Vector2(0.0625, 0.5), Vector2(0.0625, 0.57812), Vector2(0.03905999, 0.5), Vector2(0.0625, 0.57812), Vector2(0.03905999, 0.57812), Vector2(0.03905999, 0.5), Vector2(0.08594, 0.57812), Vector2(0.08594, 0.5), Vector2(0.0625, 0.57812), Vector2(0.08594, 0.5), Vector2(0.0625, 0.5), Vector2(0.0625, 0.57812), Vector2(0.1015599, 0.5), Vector2(0.1015599, 0.45312), Vector2(0.125, 0.5), Vector2(0.1015599, 0.45312), Vector2(0.125, 0.45312), Vector2(0.125, 0.5), Vector2(0.03905999, 0.5), Vector2(0.03905999, 0.45312), Vector2(0.0625, 0.5), Vector2(0.03905999, 0.45312), Vector2(0.0625, 0.45312), Vector2(0.0625, 0.5), Vector2(0.2265599, 0.5), Vector2(0.2265599, 0.46875), Vector2(0.25781, 0.5), Vector2(0.2265599, 0.46875), Vector2(0.25781, 0.46875), Vector2(0.25781, 0.5), Vector2(0.27344, 0.5), Vector2(0.27344, 0.46875), Vector2(0.30469, 0.5), Vector2(0.27344, 0.46875), Vector2(0.30469, 0.46875), Vector2(0.30469, 0.5), Vector2(0.27344, 0.5), Vector2(0.27344, 0.5625), Vector2(0.25781, 0.5), Vector2(0.27344, 0.5625), Vector2(0.25781, 0.5625), Vector2(0.25781, 0.5), Vector2(0.28906, 0.5625), Vector2(0.28906, 0.5), Vector2(0.27344, 0.5625), Vector2(0.28906, 0.5), Vector2(0.27344, 0.5), Vector2(0.27344, 0.5625), Vector2(0.30469, 0.5), Vector2(0.30469, 0.46875), Vector2(0.32031, 0.5), Vector2(0.30469, 0.46875), Vector2(0.32031, 0.46875), Vector2(0.32031, 0.5), Vector2(0.25781, 0.5), Vector2(0.25781, 0.46875), Vector2(0.27344, 0.5), Vector2(0.25781, 0.46875), Vector2(0.27344, 0.46875), Vector2(0.27344, 0.5), Vector2(0.09375, 0.4375), Vector2(0.09375, 0.25), Vector2(0.125, 0.4375), Vector2(0.09375, 0.25), Vector2(0.125, 0.25), Vector2(0.125, 0.4375), Vector2(0.14844, 0.4375), Vector2(0.14844, 0.25), Vector2(0.17969, 0.4375), Vector2(0.14844, 0.25), Vector2(0.17969, 0.25), Vector2(0.17969, 0.4375), Vector2(0.14844, 0.4375), Vector2(0.14844, 0.5), Vector2(0.125, 0.4375), Vector2(0.14844, 0.5), Vector2(0.125, 0.5), Vector2(0.125, 0.4375), Vector2(0.17188, 0.5), Vector2(0.17188, 0.4375), Vector2(0.14844, 0.5), Vector2(0.17188, 0.4375), Vector2(0.14844, 0.4375), Vector2(0.14844, 0.5), Vector2(0.17969, 0.4375), Vector2(0.17969, 0.25), Vector2(0.2031199, 0.4375), Vector2(0.17969, 0.25), Vector2(0.2031199, 0.25), Vector2(0.2031199, 0.4375), Vector2(0.125, 0.4375), Vector2(0.125, 0.25), Vector2(0.14844, 0.4375), Vector2(0.125, 0.25), Vector2(0.14844, 0.25), Vector2(0.14844, 0.4375), Vector2(0.2031199, 0.39062), Vector2(0.2031199, 0.32812), Vector2(0.24219, 0.39062), Vector2(0.2031199, 0.32812), Vector2(0.24219, 0.32812), Vector2(0.24219, 0.39062), Vector2(0.27344, 0.39062), Vector2(0.27344, 0.32812), Vector2(0.3125, 0.39062), Vector2(0.27344, 0.32812), Vector2(0.3125, 0.32812), Vector2(0.3125, 0.39062), Vector2(0.27344, 0.39062), Vector2(0.27344, 0.46875), Vector2(0.24219, 0.39062), Vector2(0.27344, 0.46875), Vector2(0.24219, 0.46875), Vector2(0.24219, 0.39062), Vector2(0.30469, 0.46875), Vector2(0.30469, 0.39062), Vector2(0.27344, 0.46875), Vector2(0.30469, 0.39062), Vector2(0.27344, 0.39062), Vector2(0.27344, 0.46875), Vector2(0.3125, 0.39062), Vector2(0.3125, 0.32812), Vector2(0.34375, 0.39062), Vector2(0.3125, 0.32812), Vector2(0.34375, 0.32812), Vector2(0.34375, 0.39062), Vector2(0.24219, 0.39062), Vector2(0.24219, 0.32812), Vector2(0.27344, 0.39062), Vector2(0.24219, 0.32812), Vector2(0.27344, 0.32812), Vector2(0.27344, 0.39062), Vector2(0.07811999, 0.1875), Vector2(0.07811999, 0.0), Vector2(0.10938, 0.1875), Vector2(0.07811999, 0.0), Vector2(0.10938, 0.0), Vector2(0.10938, 0.1875), Vector2(0.1328099, 0.1875), Vector2(0.1328099, 0.0), Vector2(0.1640599, 0.1875), Vector2(0.1328099, 0.0), Vector2(0.1640599, 0.0), Vector2(0.1640599, 0.1875), Vector2(0.1328099, 0.1875), Vector2(0.1328099, 0.25), Vector2(0.10938, 0.1875), Vector2(0.1328099, 0.25), Vector2(0.10938, 0.25), Vector2(0.10938, 0.1875), Vector2(0.15625, 0.25), Vector2(0.15625, 0.1875), Vector2(0.1328099, 0.25), Vector2(0.15625, 0.1875), Vector2(0.1328099, 0.1875), Vector2(0.1328099, 0.25), Vector2(0.1640599, 0.1875), Vector2(0.1640599, 0.0), Vector2(0.1875, 0.1875), Vector2(0.1640599, 0.0), Vector2(0.1875, 0.0), Vector2(0.1875, 0.1875), Vector2(0.10938, 0.1875), Vector2(0.10938, 0.0), Vector2(0.1328099, 0.1875), Vector2(0.10938, 0.0), Vector2(0.1328099, 0.0), Vector2(0.1328099, 0.1875), Vector2(0.34375, 0.92188), Vector2(0.34375, 0.89062), Vector2(0.38281, 0.92188), Vector2(0.34375, 0.89062), Vector2(0.38281, 0.89062), Vector2(0.38281, 0.92188), Vector2(0.41406, 0.92188), Vector2(0.41406, 0.89062), Vector2(0.45312, 0.92188), Vector2(0.41406, 0.89062), Vector2(0.45312, 0.89062), Vector2(0.45312, 0.92188), Vector2(0.41406, 0.92188), Vector2(0.41406, 1.0), Vector2(0.38281, 0.92188), Vector2(0.41406, 1.0), Vector2(0.38281, 1.0), Vector2(0.38281, 0.92188), Vector2(0.44531, 1.0), Vector2(0.44531, 0.92188), Vector2(0.41406, 1.0), Vector2(0.44531, 0.92188), Vector2(0.41406, 0.92188), Vector2(0.41406, 1.0), Vector2(0.45312, 0.92188), Vector2(0.45312, 0.89062), Vector2(0.48438, 0.92188), Vector2(0.45312, 0.89062), Vector2(0.48438, 0.89062), Vector2(0.48438, 0.92188), Vector2(0.38281, 0.92188), Vector2(0.38281, 0.89062), Vector2(0.41406, 0.92188), Vector2(0.38281, 0.89062), Vector2(0.41406, 0.89062), Vector2(0.41406, 0.92188), Vector2(0.2031199, 0.26562), Vector2(0.2031199, 0.17188), Vector2(0.23438, 0.26562), Vector2(0.2031199, 0.17188), Vector2(0.23438, 0.17188), Vector2(0.23438, 0.26562), Vector2(0.26562, 0.26562), Vector2(0.26562, 0.17188), Vector2(0.29688, 0.26562), Vector2(0.26562, 0.17188), Vector2(0.29688, 0.17188), Vector2(0.29688, 0.26562), Vector2(0.26562, 0.26562), Vector2(0.26562, 0.32812), Vector2(0.23438, 0.26562), Vector2(0.26562, 0.32812), Vector2(0.23438, 0.32812), Vector2(0.23438, 0.26562), Vector2(0.29688, 0.32812), Vector2(0.29688, 0.26562), Vector2(0.26562, 0.32812), Vector2(0.29688, 0.26562), Vector2(0.26562, 0.26562), Vector2(0.26562, 0.32812), Vector2(0.29688, 0.26562), Vector2(0.29688, 0.17188), Vector2(0.32812, 0.26562), Vector2(0.29688, 0.17188), Vector2(0.32812, 0.17188), Vector2(0.32812, 0.26562), Vector2(0.23438, 0.26562), Vector2(0.23438, 0.17188), Vector2(0.26562, 0.26562), Vector2(0.23438, 0.17188), Vector2(0.26562, 0.17188), Vector2(0.26562, 0.26562), Vector2(0.0, 0.25), Vector2(0.0, 0.1875), Vector2(0.02344, 0.25), Vector2(0.0, 0.1875), Vector2(0.02344, 0.1875), Vector2(0.02344, 0.25), Vector2(0.05469, 0.25), Vector2(0.05469, 0.1875), Vector2(0.07811999, 0.25), Vector2(0.05469, 0.1875), Vector2(0.07811999, 0.1875), Vector2(0.07811999, 0.25), Vector2(0.05469, 0.25), Vector2(0.05469, 0.29688), Vector2(0.02344, 0.25), Vector2(0.05469, 0.29688), Vector2(0.02344, 0.29688), Vector2(0.02344, 0.25), Vector2(0.08594, 0.29688), Vector2(0.08594, 0.25), Vector2(0.05469, 0.29688), Vector2(0.08594, 0.25), Vector2(0.05469, 0.25), Vector2(0.05469, 0.29688), Vector2(0.07811999, 0.25), Vector2(0.07811999, 0.1875), Vector2(0.10938, 0.25), Vector2(0.07811999, 0.1875), Vector2(0.10938, 0.1875), Vector2(0.10938, 0.25), Vector2(0.02344, 0.25), Vector2(0.02344, 0.1875), Vector2(0.05469, 0.25), Vector2(0.02344, 0.1875), Vector2(0.05469, 0.1875), Vector2(0.05469, 0.25), Vector2(0.32812, 0.23438), Vector2(0.32812, 0.1406199), Vector2(0.34375, 0.23438), Vector2(0.32812, 0.1406199), Vector2(0.34375, 0.1406199), Vector2(0.34375, 0.23438), Vector2(0.375, 0.23438), Vector2(0.375, 0.1406199), Vector2(0.39062, 0.23438), Vector2(0.375, 0.1406199), Vector2(0.39062, 0.1406199), Vector2(0.39062, 0.23438), Vector2(0.375, 0.23438), Vector2(0.375, 0.26562), Vector2(0.34375, 0.23438), Vector2(0.375, 0.26562), Vector2(0.34375, 0.26562), Vector2(0.34375, 0.23438), Vector2(0.40625, 0.26562), Vector2(0.40625, 0.23438), Vector2(0.375, 0.26562), Vector2(0.40625, 0.23438), Vector2(0.375, 0.23438), Vector2(0.375, 0.26562), Vector2(0.39062, 0.23438), Vector2(0.39062, 0.1406199), Vector2(0.42188, 0.23438), Vector2(0.39062, 0.1406199), Vector2(0.42188, 0.1406199), Vector2(0.42188, 0.23438), Vector2(0.34375, 0.23438), Vector2(0.34375, 0.1406199), Vector2(0.375, 0.23438), Vector2(0.34375, 0.1406199), Vector2(0.375, 0.1406199), Vector2(0.375, 0.23438), Vector2(0.0, 0.42188), Vector2(0.0, 0.32812), Vector2(0.01561999, 0.42188), Vector2(0.0, 0.32812), Vector2(0.01561999, 0.32812), Vector2(0.01561999, 0.42188), Vector2(0.04687994, 0.42188), Vector2(0.04687994, 0.32812), Vector2(0.0625, 0.42188), Vector2(0.04687994, 0.32812), Vector2(0.0625, 0.32812), Vector2(0.0625, 0.42188), Vector2(0.04687994, 0.42188), Vector2(0.04687994, 0.45312), Vector2(0.01561999, 0.42188), Vector2(0.04687994, 0.45312), Vector2(0.01561999, 0.45312), Vector2(0.01561999, 0.42188), Vector2(0.07811999, 0.45312), Vector2(0.07811999, 0.42188), Vector2(0.04687994, 0.45312), Vector2(0.07811999, 0.42188), Vector2(0.04687994, 0.42188), Vector2(0.04687994, 0.45312), Vector2(0.0625, 0.42188), Vector2(0.0625, 0.32812), Vector2(0.09375, 0.42188), Vector2(0.0625, 0.32812), Vector2(0.09375, 0.32812), Vector2(0.09375, 0.42188), Vector2(0.01561999, 0.42188), Vector2(0.01561999, 0.32812), Vector2(0.04687994, 0.42188), Vector2(0.01561999, 0.32812), Vector2(0.04687994, 0.32812), Vector2(0.04687994, 0.42188), Vector2(0.28125, 0.8125), Vector2(0.28125, 0.71875), Vector2(0.3125, 0.8125), Vector2(0.28125, 0.71875), Vector2(0.3125, 0.71875), Vector2(0.3125, 0.8125), Vector2(0.34375, 0.8125), Vector2(0.34375, 0.71875), Vector2(0.375, 0.8125), Vector2(0.34375, 0.71875), Vector2(0.375, 0.71875), Vector2(0.375, 0.8125), Vector2(0.34375, 0.8125), Vector2(0.34375, 0.875), Vector2(0.3125, 0.8125), Vector2(0.34375, 0.875), Vector2(0.3125, 0.875), Vector2(0.3125, 0.8125), Vector2(0.375, 0.875), Vector2(0.375, 0.8125), Vector2(0.34375, 0.875), Vector2(0.375, 0.8125), Vector2(0.34375, 0.8125), Vector2(0.34375, 0.875), Vector2(0.375, 0.8125), Vector2(0.375, 0.71875), Vector2(0.40625, 0.8125), Vector2(0.375, 0.71875), Vector2(0.40625, 0.71875), Vector2(0.40625, 0.8125), Vector2(0.3125, 0.8125), Vector2(0.3125, 0.71875), Vector2(0.34375, 0.8125), Vector2(0.3125, 0.71875), Vector2(0.34375, 0.71875), Vector2(0.34375, 0.8125), Vector2(0.28906, 0.64062), Vector2(0.28906, 0.60938), Vector2(0.32812, 0.64062), Vector2(0.28906, 0.60938), Vector2(0.32812, 0.60938), Vector2(0.32812, 0.64062), Vector2(0.35938, 0.64062), Vector2(0.35938, 0.60938), Vector2(0.39844, 0.64062), Vector2(0.35938, 0.60938), Vector2(0.39844, 0.60938), Vector2(0.39844, 0.64062), Vector2(0.35938, 0.64062), Vector2(0.35938, 0.71875), Vector2(0.32812, 0.64062), Vector2(0.35938, 0.71875), Vector2(0.32812, 0.71875), Vector2(0.32812, 0.64062), Vector2(0.39062, 0.71875), Vector2(0.39062, 0.64062), Vector2(0.35938, 0.71875), Vector2(0.39062, 0.64062), Vector2(0.35938, 0.64062), Vector2(0.35938, 0.71875), Vector2(0.39844, 0.64062), Vector2(0.39844, 0.60938), Vector2(0.42969, 0.64062), Vector2(0.39844, 0.60938), Vector2(0.42969, 0.60938), Vector2(0.42969, 0.64062), Vector2(0.32812, 0.64062), Vector2(0.32812, 0.60938), Vector2(0.35938, 0.64062), Vector2(0.32812, 0.60938), Vector2(0.35938, 0.60938), Vector2(0.35938, 0.64062), Vector2(0.28906, 0.5625), Vector2(0.28906, 0.5), Vector2(0.3125, 0.5625), Vector2(0.28906, 0.5), Vector2(0.3125, 0.5), Vector2(0.3125, 0.5625), Vector2(0.34375, 0.5625), Vector2(0.34375, 0.5), Vector2(0.36719, 0.5625), Vector2(0.34375, 0.5), Vector2(0.36719, 0.5), Vector2(0.36719, 0.5625), Vector2(0.34375, 0.5625), Vector2(0.34375, 0.60938), Vector2(0.3125, 0.5625), Vector2(0.34375, 0.60938), Vector2(0.3125, 0.60938), Vector2(0.3125, 0.5625), Vector2(0.375, 0.60938), Vector2(0.375, 0.5625), Vector2(0.34375, 0.60938), Vector2(0.375, 0.5625), Vector2(0.34375, 0.5625), Vector2(0.34375, 0.60938), Vector2(0.36719, 0.5625), Vector2(0.36719, 0.5), Vector2(0.39844, 0.5625), Vector2(0.36719, 0.5), Vector2(0.39844, 0.5), Vector2(0.39844, 0.5625), Vector2(0.3125, 0.5625), Vector2(0.3125, 0.5), Vector2(0.34375, 0.5625), Vector2(0.3125, 0.5), Vector2(0.34375, 0.5), Vector2(0.34375, 0.5625)});
std::vector<std::vector<int>> BONE_texco({{0, 1, 2}, {3, 4, 5}, {6, 7, 8}, {9, 10, 11}, {12, 13, 14}, {15, 16, 17}, {18, 19, 20}, {21, 22, 23}, {24, 25, 26}, {27, 28, 29}, {30, 31, 32}, {33, 34, 35}, {36, 37, 38}, {39, 40, 41}, {42, 43, 44}, {45, 46, 47}, {48, 49, 50}, {51, 52, 53}, {54, 55, 56}, {57, 58, 59}, {60, 61, 62}, {63, 64, 65}, {66, 67, 68}, {69, 70, 71}, {72, 73, 74}, {75, 76, 77}, {78, 79, 80}, {81, 82, 83}, {84, 85, 86}, {87, 88, 89}, {90, 91, 92}, {93, 94, 95}, {96, 97, 98}, {99, 100, 101}, {102, 103, 104}, {105, 106, 107}, {108, 109, 110}, {111, 112, 113}, {114, 115, 116}, {117, 118, 119}, {120, 121, 122}, {123, 124, 125}, {126, 127, 128}, {129, 130, 131}, {132, 133, 134}, {135, 136, 137}, {138, 139, 140}, {141, 142, 143}, {144, 145, 146}, {147, 148, 149}, {150, 151, 152}, {153, 154, 155}, {156, 157, 158}, {159, 160, 161}, {162, 163, 164}, {165, 166, 167}, {168, 169, 170}, {171, 172, 173}, {174, 175, 176}, {177, 178, 179}, {180, 181, 182}, {183, 184, 185}, {186, 187, 188}, {189, 190, 191}, {192, 193, 194}, {195, 196, 197}, {198, 199, 200}, {201, 202, 203}, {204, 205, 206}, {207, 208, 209}, {210, 211, 212}, {213, 214, 215}, {216, 217, 218}, {219, 220, 221}, {222, 223, 224}, {225, 226, 227}, {228, 229, 230}, {231, 232, 233}, {234, 235, 236}, {237, 238, 239}, {240, 241, 242}, {243, 244, 245}, {246, 247, 248}, {249, 250, 251}, {252, 253, 254}, {255, 256, 257}, {258, 259, 260}, {261, 262, 263}, {264, 265, 266}, {267, 268, 269}, {270, 271, 272}, {273, 274, 275}, {276, 277, 278}, {279, 280, 281}, {282, 283, 284}, {285, 286, 287}, {288, 289, 290}, {291, 292, 293}, {294, 295, 296}, {297, 298, 299}, {300, 301, 302}, {303, 304, 305}, {306, 307, 308}, {309, 310, 311}, {312, 313, 314}, {315, 316, 317}, {318, 319, 320}, {321, 322, 323}, {324, 325, 326}, {327, 328, 329}, {330, 331, 332}, {333, 334, 335}, {336, 337, 338}, {339, 340, 341}, {342, 343, 344}, {345, 346, 347}, {348, 349, 350}, {351, 352, 353}, {354, 355, 356}, {357, 358, 359}, {360, 361, 362}, {363, 364, 365}, {366, 367, 368}, {369, 370, 371}, {372, 373, 374}, {375, 376, 377}, {378, 379, 380}, {381, 382, 383}, {384, 385, 386}, {387, 388, 389}, {390, 391, 392}, {393, 394, 395}, {396, 397, 398}, {399, 400, 401}, {402, 403, 404}, {405, 406, 407}, {408, 409, 410}, {411, 412, 413}, {414, 415, 416}, {417, 418, 419}, {420, 421, 422}, {423, 424, 425}, {426, 427, 428}, {429, 430, 431}, {432, 433, 434}, {435, 436, 437}, {438, 439, 440}, {441, 442, 443}, {444, 445, 446}, {447, 448, 449}, {450, 451, 452}, {453, 454, 455}, {456, 457, 458}, {459, 460, 461}, {462, 463, 464}, {465, 466, 467}, {468, 469, 470}, {471, 472, 473}, {474, 475, 476}, {477, 478, 479}, {480, 481, 482}, {483, 484, 485}, {486, 487, 488}, {489, 490, 491}, {492, 493, 494}, {495, 496, 497}, {498, 499, 500}, {501, 502, 503}, {504, 505, 506}, {507, 508, 509}, {510, 511, 512}, {513, 514, 515}, {516, 517, 518}, {519, 520, 521}, {522, 523, 524}, {525, 526, 527}, {528, 529, 530}, {531, 532, 533}, {534, 535, 536}, {537, 538, 539}, {540, 541, 542}, {543, 544, 545}, {546, 547, 548}, {549, 550, 551}, {552, 553, 554}, {555, 556, 557}, {558, 559, 560}, {561, 562, 563}, {564, 565, 566}, {567, 568, 569}, {570, 571, 572}, {573, 574, 575}, {576, 577, 578}, {579, 580, 581}, {582, 583, 584}, {585, 586, 587}, {588, 589, 590}, {591, 592, 593}, {594, 595, 596}, {597, 598, 599}, {600, 601, 602}, {603, 604, 605}, {606, 607, 608}, {609, 610, 611}, {612, 613, 614}, {615, 616, 617}, {618, 619, 620}, {621, 622, 623}, {624, 625, 626}, {627, 628, 629}, {630, 631, 632}, {633, 634, 635}, {636, 637, 638}, {639, 640, 641}, {642, 643, 644}, {645, 646, 647}, {648, 649, 650}, {651, 652, 653}, {654, 655, 656}, {657, 658, 659}, {660, 661, 662}, {663, 664, 665}, {666, 667, 668}, {669, 670, 671}, {672, 673, 674}, {675, 676, 677}, {678, 679, 680}, {681, 682, 683}, {684, 685, 686}, {687, 688, 689}, {690, 691, 692}, {693, 694, 695}, {696, 697, 698}, {699, 700, 701}, {702, 703, 704}, {705, 706, 707}, {708, 709, 710}, {711, 712, 713}, {714, 715, 716}, {717, 718, 719}, {720, 721, 722}, {723, 724, 725}, {726, 727, 728}, {729, 730, 731}, {732, 733, 734}, {735, 736, 737}, {738, 739, 740}, {741, 742, 743}, {744, 745, 746}, {747, 748, 749}, {750, 751, 752}, {753, 754, 755}, {756, 757, 758}, {759, 760, 761}, {762, 763, 764}, {765, 766, 767}, {768, 769, 770}, {771, 772, 773}, {774, 775, 776}, {777, 778, 779}, {780, 781, 782}, {783, 784, 785}, {786, 787, 788}, {789, 790, 791}, {792, 793, 794}, {795, 796, 797}, {798, 799, 800}, {801, 802, 803}, {804, 805, 806}, {807, 808, 809}, {810, 811, 812}, {813, 814, 815}, {816, 817, 818}, {819, 820, 821}, {822, 823, 824}, {825, 826, 827}, {828, 829, 830}, {831, 832, 833}, {834, 835, 836}, {837, 838, 839}, {840, 841, 842}, {843, 844, 845}, {846, 847, 848}, {849, 850, 851}, {852, 853, 854}, {855, 856, 857}, {858, 859, 860}, {861, 862, 863}, {864, 865, 866}, {867, 868, 869}, {870, 871, 872}, {873, 874, 875}, {876, 877, 878}, {879, 880, 881}, {882, 883, 884}, {885, 886, 887}, {888, 889, 890}, {891, 892, 893}, {894, 895, 896}, {897, 898, 899}, {900, 901, 902}, {903, 904, 905}, {906, 907, 908}, {909, 910, 911}, {912, 913, 914}, {915, 916, 917}, {918, 919, 920}, {921, 922, 923}, {924, 925, 926}, {927, 928, 929}, {930, 931, 932}, {933, 934, 935}, {936, 937, 938}, {939, 940, 941}, {942, 943, 944}, {945, 946, 947}, {948, 949, 950}, {951, 952, 953}, {954, 955, 956}, {957, 958, 959}, {960, 961, 962}, {963, 964, 965}, {966, 967, 968}, {969, 970, 971}, {972, 973, 974}, {975, 976, 977}, {978, 979, 980}, {981, 982, 983}, {984, 985, 986}, {987, 988, 989}, {990, 991, 992}, {993, 994, 995}, {996, 997, 998}, {999, 1000, 1001}, {1002, 1003, 1004}, {1005, 1006, 1007}, {1008, 1009, 1010}, {1011, 1012, 1013}, {1014, 1015, 1016}, {1017, 1018, 1019}, {1020, 1021, 1022}, {1023, 1024, 1025}, {1026, 1027, 1028}, {1029, 1030, 1031}, {1032, 1033, 1034}, {1035, 1036, 1037}, {1038, 1039, 1040}, {1041, 1042, 1043}, {1044, 1045, 1046}, {1047, 1048, 1049}, {1050, 1051, 1052}, {1053, 1054, 1055}, {1056, 1057, 1058}, {1059, 1060, 1061}, {1062, 1063, 1064}, {1065, 1066, 1067}, {1068, 1069, 1070}, {1071, 1072, 1073}, {1074, 1075, 1076}, {1077, 1078, 1079}, {1080, 1081, 1082}, {1083, 1084, 1085}, {1086, 1087, 1088}, {1089, 1090, 1091}, {1092, 1093, 1094}, {1095, 1096, 1097}, {1098, 1099, 1100}, {1101, 1102, 1103}, {1104, 1105, 1106}, {1107, 1108, 1109}, {1110, 1111, 1112}, {1113, 1114, 1115}, {1116, 1117, 1118}, {1119, 1120, 1121}, {1122, 1123, 1124}, {1125, 1126, 1127}, {1128, 1129, 1130}, {1131, 1132, 1133}, {1134, 1135, 1136}, {1137, 1138, 1139}, {1140, 1141, 1142}, {1143, 1144, 1145}, {1146, 1147, 1148}, {1149, 1150, 1151}, {1152, 1153, 1154}, {1155, 1156, 1157}, {1158, 1159, 1160}, {1161, 1162, 1163}, {1164, 1165, 1166}, {1167, 1168, 1169}, {1170, 1171, 1172}, {1173, 1174, 1175}, {1176, 1177, 1178}, {1179, 1180, 1181}, {1182, 1183, 1184}, {1185, 1186, 1187}, {1188, 1189, 1190}, {1191, 1192, 1193}, {1194, 1195, 1196}, {1197, 1198, 1199}, {1200, 1201, 1202}, {1203, 1204, 1205}, {1206, 1207, 1208}, {1209, 1210, 1211}, {1212, 1213, 1214}, {1215, 1216, 1217}, {1218, 1219, 1220}, {1221, 1222, 1223}});
std::vector<std::string> BONE_bones({"Hips", "Spine", "Chest", "Neck", "Head", "Shoulder_L", "Arm_L", "LowerArm_L", "Shoulder_R", "Arm_R", "LowerArm_R", "Thigh_L", "Leg_L", "Foot_L", "Toes_L", "Foot_L_002", "Thigh_R", "Leg_R", "Foot_R", "Toes_R", "Foot_R_002", "Tail_000", "Tail_001", "Tail_002", "Tail_003"});
std::vector<int> BONE_parent({-1, 0, 1, 2, 3, 2, 5, 6, 2, 8, 9, 0, 11, 12, 13, 14, 0, 16, 17, 18, 19, 0, 21, 22, 23});
std::vector<Matrix4> BONE_bonetrans({Matrix4(-1.0, 1.4465e-14, -3.89414e-07, 1.1807e-14, -2.55682e-15, 1.0, 4.37114e-08, 0.8162464, 3.89414e-07, 4.37114e-08, -1.0, 3.56793e-08, 0.0, 0.0, 0.0, 1.0), Matrix4(1.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.1857724, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 1.0), Matrix4(1.0, 0.0, 0.0, 0.0, 0.0, 1.0, -1.06581e-14, 0.1868299, 0.0, 1.06581e-14, 1.0, 0.0, 0.0, 0.0, 0.0, 1.0), Matrix4(1.0, 0.0, 2.38419e-07, 0.0, 0.0, 1.0, 2.84217e-14, 0.1783969, -2.38419e-07, -2.84217e-14, 1.0, 0.0, 0.0, 0.0, 0.0, 1.0), Matrix4(1.0, 2.99257e-07, 3.20144e-08, 0.0, 8.4593e-09, -0.1342785, 0.9909437, 0.3779982, 3.00845e-07, -0.9909437, -0.1342785, 0.0, 0.0, 0.0, 0.0, 1.0), Matrix4(-6.82039e-15, -1.0, -6.3573e-08, -0.1308923, 1.0, 2.22051e-16, -4.37114e-08, 0.1783969, 4.37114e-08, -6.3573e-08, 1.0, -8.32122e-09, 0.0, 0.0, 0.0, 1.0), Matrix4(1.51112e-14, -1.0, 4.37114e-08, 0.0, 1.0, 1.85066e-14, -3.89414e-07, 0.2, 3.89414e-07, 4.37114e-08, 1.0, -7.10543e-15, 0.0, 0.0, 0.0, 1.0), Matrix4(1.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.3029573, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 1.0), Matrix4(-1.26266e-15, 1.0, -6.3573e-08, 0.1308923, -1.0, -2.22051e-16, -4.37114e-08, 0.1783969, -4.37114e-08, 6.3573e-08, 1.0, 8.32122e-09, 0.0, 0.0, 0.0, 1.0), Matrix4(1.51112e-14, 1.0, -4.37114e-08, 0.0, -1.0, -1.04235e-14, -3.89414e-07, 0.2, -3.89414e-07, 4.37114e-08, 1.0, -7.10543e-15, 0.0, 0.0, 0.0, 1.0), Matrix4(1.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.3029573, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 1.0), Matrix4(2.76343e-07, 2.98023e-08, -1.0, -0.1293129, 0.4425922, -0.896723, 5.96046e-08, -0.05058306, -0.896723, -0.4425921, -2.68221e-07, -3.73265e-08, 0.0, 0.0, 0.0, 1.0), Matrix4(0.6509132, -0.7591522, -9.11436e-08, 0.0, 0.7591522, 0.6509131, 1.29258e-07, 0.3179505, -3.88001e-08, -1.53328e-07, 1.0, 0.0, 0.0, 0.0, 0.0, 1.0), Matrix4(0.3726618, 0.9279673, 2.99971e-08, -7.45058e-09, -0.9279673, 0.372662, -2.56101e-07, 0.385881, -2.48832e-07, 6.76026e-08, 1.0, -1.49012e-08, 0.0, 0.0, 0.0, 1.0), Matrix4(0.9999999, 7.7458e-08, 5.96046e-08, -3.72529e-09, -5.96046e-08, -1.02302e-07, 0.9999999, 0.1121631, 7.7458e-08, -0.9999999, -1.59872e-14, 1.49012e-08, 0.0, 0.0, 0.0, 1.0), Matrix4(0.4999998, 0.7071066, -0.5000002, 0.0, -0.7071068, -3.92487e-07, -0.7071066, 5.60284e-06, -0.5000001, 0.7071068, 0.4999999, 0.0, 0.0, 0.0, 0.0, 1.0), Matrix4(3.5149e-07, 2.98023e-08, 1.0, 0.1293129, -0.4425921, -0.896723, 1.19209e-07, -0.05058306, 0.8967231, -0.4425922, -3.42727e-07, -2.08849e-08, 0.0, 0.0, 0.0, 1.0), Matrix4(0.6509131, 0.7591522, 2.20173e-07, -2.98023e-08, -0.7591522, 0.6509131, 2.39891e-07, 0.3179506, 3.88002e-08, -3.23293e-07, 1.0, 1.49012e-08, 0.0, 0.0, 0.0, 1.0), Matrix4(0.372662, -0.9279672, 2.63271e-07, 0.0, 0.9279672, 0.372662, -3.73874e-07, 0.385881, 2.48832e-07, 3.83635e-07, 1.0, 0.0, 0.0, 0.0, 0.0, 1.0), Matrix4(1.0, -5.65282e-07, -5.96046e-08, -3.72529e-09, 5.96046e-08, 2.06257e-07, 1.0, 0.1121631, -5.65282e-07, -1.0, 2.38418e-07, -1.49012e-08, 0.0, 0.0, 0.0, 1.0), Matrix4(0.5000001, -0.7071068, 0.4999997, 3.72529e-09, 0.7071069, 5.35522e-07, -0.7071067, 5.60284e-06, 0.4999998, 0.7071067, 0.5000003, 0.0, 0.0, 0.0, 0.0, 1.0), Matrix4(1.0, -3.352e-08, -2.3842e-07, -4.42497e-09, -1.54193e-07, -0.8496988, -0.5272684, 0.05366582, -1.84911e-07, 0.5272684, -0.8496995, 0.06960455, 0.0, 0.0, 0.0, 1.0), Matrix4(1.0, -3.26984e-08, -1.49498e-09, -4.26326e-14, 3.26605e-08, 0.9937293, 0.1118131, 0.3744766, -2.17045e-09, -0.1118131, 0.9937292, 0.0, 0.0, 0.0, 0.0, 1.0), Matrix4(1.0, -5.63484e-08, -2.42897e-07, -7.10543e-15, 1.02147e-07, 0.9812168, 0.1929087, 0.2730985, 2.27465e-07, -0.1929087, 0.9812168, -2.98023e-08, 0.0, 0.0, 0.0, 1.0), Matrix4(1.0, -1.59809e-07, -2.60654e-07, -2.84217e-14, 2.31024e-07, 0.9533696, 0.3018055, 0.2508341, 2.00269e-07, -0.3018055, 0.9533695, 1.49012e-08, 0.0, 0.0, 0.0, 1.0)});
std::vector<Vector3> BONE_bonetips({Vector3(-4.42497e-09, 0.05366582, 0.06960455), Vector3(0.0, 0.1868299, 0.0), Vector3(0.1308923, 0.1783969, 8.32122e-09), Vector3(0.0, 0.3779982, 0.0), Vector3(0.0, -0.04022955, 0.2968846), Vector3(0.0, 0.2, -7.10543e-15), Vector3(0.0, 0.3029573, 0.0), Vector3(0.0, -0.2865189, 0.0), Vector3(0.0, 0.2, -7.10543e-15), Vector3(0.0, 0.3029573, 0.0), Vector3(0.0, -0.2865189, 0.0), Vector3(0.0, 0.3179505, 0.0), Vector3(-7.45058e-09, 0.385881, -1.49012e-08), Vector3(-3.72529e-09, 0.1121631, 1.49012e-08), Vector3(0.0, 5.60284e-06, 0.0), Vector3(0.0, 0.0, 0.09470003), Vector3(-2.98023e-08, 0.3179506, 1.49012e-08), Vector3(0.0, 0.385881, 0.0), Vector3(-3.72529e-09, 0.1121631, -1.49012e-08), Vector3(3.72529e-09, 5.60284e-06, 0.0), Vector3(0.0, 0.0, 0.09470003), Vector3(-4.26326e-14, 0.3744766, 0.0), Vector3(-7.10543e-15, 0.2730985, -2.98023e-08), Vector3(-2.84217e-14, 0.2508341, 1.49012e-08), Vector3(0.0, -0.09801453, -0.2301211)});
std::unordered_set<int> BONE_atips({4, 24, 7, 10, 15, 20});
std::vector<std::unordered_map<int, float>> BONE_weights({std::unordered_map<int, float>({{5, 1.0}}), std::unordered_map<int, float>({{5, 1.0}}), std::unordered_map<int, float>({{5, 1.0}}), std::unordered_map<int, float>({{5, 1.0}}), std::unordered_map<int, float>({{5, 1.0}}), std::unordered_map<int, float>({{5, 1.0}}), std::unordered_map<int, float>({{5, 1.0}}), std::unordered_map<int, float>({{5, 1.0}}), std::unordered_map<int, float>({{5, 1.0}}), std::unordered_map<int, float>({{5, 1.0}}), std::unordered_map<int, float>({{5, 1.0}}), std::unordered_map<int, float>({{5, 1.0}}), std::unordered_map<int, float>({{5, 1.0}}), std::unordered_map<int, float>({{5, 1.0}}), std::unordered_map<int, float>({{5, 1.0}}), std::unordered_map<int, float>({{5, 1.0}}), std::unordered_map<int, float>({{1, 0.8529773}, {3, 0.1470226}}), std::unordered_map<int, float>({{1, 0.998557}, {3, 0.001442968}}), std::unordered_map<int, float>({{1, 0.4066401}, {3, 0.5801516}, {8, 0.01320827}}), std::unordered_map<int, float>({{1, 0.9891176}, {3, 0.01088231}}), std::unordered_map<int, float>({{1, 0.766871}, {3, 0.233129}}), std::unordered_map<int, float>({{1, 0.996929}, {3, 0.00307089}}), std::unordered_map<int, float>({{3, 1.0}}), std::unordered_map<int, float>({{1, 0.8966966}, {3, 0.1033034}}), std::unordered_map<int, float>({}), std::unordered_map<int, float>({}), std::unordered_map<int, float>({}), std::unordered_map<int, float>({}), std::unordered_map<int, float>({}), std::unordered_map<int, float>({}), std::unordered_map<int, float>({{3, 1.0}}), std::unordered_map<int, float>({}), std::unordered_map<int, float>({}), std::unordered_map<int, float>({}), std::unordered_map<int, float>({}), std::unordered_map<int, float>({}), std::unordered_map<int, float>({}), std::unordered_map<int, float>({}), std::unordered_map<int, float>({}), std::unordered_map<int, float>({}), std::unordered_map<int, float>({}), std::unordered_map<int, float>({}), std::unordered_map<int, float>({}), std::unordered_map<int, float>({}), std::unordered_map<int, float>({}), std::unordered_map<int, float>({}), std::unordered_map<int, float>({}), std::unordered_map<int, float>({}), std::unordered_map<int, float>({{1, 1.0}}), std::unordered_map<int, float>({{1, 1.0}}), std::unordered_map<int, float>({{1, 0.9952955}, {21, 0.004704475}}), std::unordered_map<int, float>({{1, 1.0}}), std::unordered_map<int, float>({{1, 1.0}}), std::unordered_map<int, float>({{1, 1.0}}), std::unordered_map<int, float>({{1, 0.9994006}, {9, 0.000599499}}), std::unordered_map<int, float>({{1, 1.0}}), std::unordered_map<int, float>({{1, 1.0}}), std::unordered_map<int, float>({{1, 0.9963824}, {7, 0.003617584}}), std::unordered_map<int, float>({}), std::unordered_map<int, float>({}), std::unordered_map<int, float>({}), std::unordered_map<int, float>({}), std::unordered_map<int, float>({{1, 1.0}}), std::unordered_map<int, float>({{1, 1.0}}), std::unordered_map<int, float>({{21, 1.0}}), std::unordered_map<int, float>({{21, 1.0}}), std::unordered_map<int, float>({{21, 1.0}}), std::unordered_map<int, float>({{21, 1.0}}), std::unordered_map<int, float>({{21, 1.0}}), std::unordered_map<int, float>({{21, 1.0}}), std::unordered_map<int, float>({{21, 1.0}}), std::unordered_map<int, float>({{21, 1.0}}), std::unordered_map<int, float>({{21, 1.0}}), std::unordered_map<int, float>({{21, 1.0}}), std::unordered_map<int, float>({{21, 1.0}}), std::unordered_map<int, float>({{21, 1.0}}), std::unordered_map<int, float>({{21, 1.0}}), std::unordered_map<int, float>({{21, 1.0}}), std::unordered_map<int, float>({{21, 1.0}}), std::unordered_map<int, float>({{21, 1.0}}), std::unordered_map<int, float>({{21, 0.1808444}, {22, 0.8191555}}), std::unordered_map<int, float>({{21, 0.09547179}, {22, 0.9045282}}), std::unordered_map<int, float>({{21, 0.8378612}, {22, 0.1621387}}), std::unordered_map<int, float>({{21, 0.5514469}, {22, 0.4485531}}), std::unordered_map<int, float>({{21, 0.8093119}, {22, 0.190688}}), std::unordered_map<int, float>({{21, 1.0}}), std::unordered_map<int, float>({{21, 0.3223295}, {22, 0.6776705}}), std::unordered_map<int, float>({{21, 0.7996553}, {22, 0.2003446}}), std::unordered_map<int, float>({{21, 0.222367}, {22, 0.777633}}), std::unordered_map<int, float>({{21, 0.2299628}, {22, 0.7700371}}), std::unordered_map<int, float>({{22, 1.0}}), std::unordered_map<int, float>({{22, 1.0}}), std::unordered_map<int, float>({{22, 1.0}}), std::unordered_map<int, float>({{22, 1.0}}), std::unordered_map<int, float>({{21, 0.7103378}, {22, 0.2896623}}), std::unordered_map<int, float>({{21, 0.8293646}, {22, 0.1706354}}), std::unordered_map<int, float>({{4, 0.9959033}, {6, 0.004096686}}), std::unordered_map<int, float>({{3, 0.001236855}, {4, 0.9936886}, {6, 0.005074501}}), std::unordered_map<int, float>({{3, 0.000113238}, {4, 0.9919207}, {6, 0.007965981}}), std::unordered_map<int, float>({{3, 0.001733243}, {4, 0.9946213}, {6, 0.00364542}}), std::unordered_map<int, float>({{3, 0.001623034}, {4, 0.9940576}, {6, 0.00431919}}), std::unordered_map<int, float>({{3, 0.004604995}, {4, 0.9911864}, {6, 0.004208445}}), std::unordered_map<int, float>({{3, 0.000138603}, {4, 0.9991685}, {6, 0.00069285}}), std::unordered_map<int, float>({{3, 0.001526653}, {4, 0.9972277}, {5, 0.000131022}, {6, 0.001114487}}), std::unordered_map<int, float>({{3, 0.000134567}, {4, 0.9983919}, {6, 0.001473486}}), std::unordered_map<int, float>({{4, 0.9976123}, {6, 0.002387702}}), std::unordered_map<int, float>({{3, 0.000913854}, {4, 0.9990862}}), std::unordered_map<int, float>({{3, 0.002636373}, {4, 0.9973637}}), std::unordered_map<int, float>({{3, 0.000709075}, {4, 0.9992909}}), std::unordered_map<int, float>({{3, 0.00113064}, {4, 0.9988693}}), std::unordered_map<int, float>({{4, 0.9989398}, {6, 0.001060247}}), std::unordered_map<int, float>({{3, 0.001171112}, {4, 0.9971176}, {5, 0.000129275}, {6, 0.001581966}}), std::unordered_map<int, float>({{4, 0.9993956}, {8, 0.000604494}}), std::unordered_map<int, float>({{4, 0.999794}, {8, 0.000206048}}), std::unordered_map<int, float>({{3, 0.000206099}, {4, 0.9945594}, {8, 0.005234599}}), std::unordered_map<int, float>({{3, 0.002026081}, {4, 0.9929451}, {5, 0.000115437}, {8, 0.00491333}}), std::unordered_map<int, float>({{3, 0.000814731}, {4, 0.9984874}, {8, 0.000697883}}), std::unordered_map<int, float>({{3, 0.003323853}, {4, 0.9960646}, {5, 0.000120365}, {8, 0.000491113}}), std::unordered_map<int, float>({{3, 0.00408858}, {4, 0.9959115}}), std::unordered_map<int, float>({{3, 0.01247501}, {4, 0.987525}}), std::unordered_map<int, float>({{3, 0.002589404}, {4, 0.9974106}}), std::unordered_map<int, float>({{4, 0.9980069}, {8, 0.001993}}), std::unordered_map<int, float>({{4, 1.0}}), std::unordered_map<int, float>({{4, 1.0}}), std::unordered_map<int, float>({{4, 1.0}}), std::unordered_map<int, float>({{4, 1.0}}), std::unordered_map<int, float>({{4, 0.9983699}, {8, 0.001630127}}), std::unordered_map<int, float>({{4, 0.9994131}, {8, 0.00058698}}), std::unordered_map<int, float>({{3, 0.05864399}, {4, 0.8777422}, {6, 0.06361371}}), std::unordered_map<int, float>({{3, 0.03436344}, {4, 0.9025163}, {6, 0.06312018}}), std::unordered_map<int, float>({{3, 0.000100474}, {4, 0.9998996}}), std::unordered_map<int, float>({{3, 0.000214436}, {4, 0.9969463}, {6, 0.002839148}}), std::unordered_map<int, float>({{4, 1.0}}), std::unordered_map<int, float>({{3, 0.000126733}, {4, 0.9998732}}), std::unordered_map<int, float>({{3, 0.07337057}, {4, 0.9266294}}), std::unordered_map<int, float>({{3, 0.05739372}, {4, 0.9426062}}), std::unordered_map<int, float>({{3, 0.07585614}, {4, 0.9241439}}), std::unordered_map<int, float>({{3, 0.06755101}, {4, 0.932449}}), std::unordered_map<int, float>({{3, 0.05461657}, {4, 0.9453834}}), std::unordered_map<int, float>({{3, 0.000115333}, {4, 0.9998846}}), std::unordered_map<int, float>({{3, 0.03652495}, {4, 0.9634751}}), std::unordered_map<int, float>({{3, 0.000201538}, {4, 0.9997984}}), std::unordered_map<int, float>({{3, 0.06512171}, {4, 0.9348783}}), std::unordered_map<int, float>({{3, 0.03831529}, {4, 0.9616847}}), std::unordered_map<int, float>({{3, 0.002164065}, {4, 0.9215717}, {6, 0.0762642}}), std::unordered_map<int, float>({{3, 0.003195285}, {4, 0.9329303}, {6, 0.0638743}}), std::unordered_map<int, float>({{3, 0.000105011}, {4, 0.9930348}, {6, 0.006860077}}), std::unordered_map<int, float>({{3, 0.000168888}, {4, 0.9971611}, {6, 0.00266993}}), std::unordered_map<int, float>({{3, 0.000101521}, {4, 0.996921}, {6, 0.00297749}}), std::unordered_map<int, float>({{3, 9.99675e-05}, {4, 0.9993186}, {6, 0.000581406}}), std::unordered_map<int, float>({{3, 0.004597365}, {4, 0.9843164}, {6, 0.01108622}}), std::unordered_map<int, float>({{3, 0.007739961}, {4, 0.9835877}, {6, 0.008672356}}), std::unordered_map<int, float>({{3, 0.003895223}, {4, 0.9629427}, {5, 0.002048611}, {6, 0.0311135}}), std::unordered_map<int, float>({{3, 0.002434194}, {4, 0.9616278}, {5, 0.000934643}, {6, 0.03500318}}), std::unordered_map<int, float>({{3, 0.008186697}, {4, 0.9918133}}), std::unordered_map<int, float>({{3, 0.000111622}, {4, 0.9998884}}), std::unordered_map<int, float>({{3, 0.004440784}, {4, 0.9955591}}), std::unordered_map<int, float>({{3, 0.000199874}, {4, 0.9998002}}), std::unordered_map<int, float>({{3, 0.002878367}, {4, 0.9861035}, {6, 0.01101803}}), std::unordered_map<int, float>({{3, 0.004203975}, {4, 0.9868083}, {6, 0.008987665}}), std::unordered_map<int, float>({{3, 0.01666033}, {4, 0.9833397}}), std::unordered_map<int, float>({{3, 0.04235315}, {4, 0.9576468}}), std::unordered_map<int, float>({{3, 0.000475268}, {4, 0.9995247}}), std::unordered_map<int, float>({{3, 0.00059557}, {4, 0.9994044}}), std::unordered_map<int, float>({{3, 0.000617368}, {4, 0.9984303}, {9, 0.00095237}}), std::unordered_map<int, float>({{3, 0.002082049}, {4, 0.9975655}, {9, 0.000352409}}), std::unordered_map<int, float>({{3, 0.03255468}, {4, 0.9592369}, {9, 0.008208394}}), std::unordered_map<int, float>({{3, 0.05854445}, {4, 0.9367514}, {9, 0.004703998}}), std::unordered_map<int, float>({{3, 0.03527003}, {4, 0.9647299}}), std::unordered_map<int, float>({{3, 0.01780623}, {4, 0.9821938}}), std::unordered_map<int, float>({{3, 0.05395537}, {4, 0.9460446}}), std::unordered_map<int, float>({{3, 0.001779735}, {4, 0.9982203}}), std::unordered_map<int, float>({{3, 0.03825044}, {4, 0.9617495}}), std::unordered_map<int, float>({{3, 0.000481608}, {4, 0.9995183}}), std::unordered_map<int, float>({{3, 0.03290259}, {4, 0.9670975}}), std::unordered_map<int, float>({{3, 0.05916512}, {4, 0.9408349}}), std::unordered_map<int, float>({{3, 0.009195089}, {4, 0.9908049}}), std::unordered_map<int, float>({{3, 0.02555179}, {4, 0.9744481}}), std::unordered_map<int, float>({{3, 0.000458186}, {4, 0.9995419}}), std::unordered_map<int, float>({{4, 1.0}}), std::unordered_map<int, float>({{3, 0.001099169}, {4, 0.9987362}, {9, 0.000164539}}), std::unordered_map<int, float>({{3, 0.000397261}, {4, 0.9996027}}), std::unordered_map<int, float>({{3, 0.008410871}, {4, 0.9908853}, {9, 0.000703835}}), std::unordered_map<int, float>({{3, 0.02135628}, {4, 0.9782524}, {9, 0.000391238}}), std::unordered_map<int, float>({{3, 0.00880748}, {4, 0.9836114}, {8, 0.007581114}}), std::unordered_map<int, float>({{3, 0.008231699}, {4, 0.9783521}, {8, 0.01327157}, {9, 0.000144487}}), std::unordered_map<int, float>({{3, 0.02520841}, {4, 0.9747917}}), std::unordered_map<int, float>({{3, 0.000429862}, {4, 0.9995702}}), std::unordered_map<int, float>({{3, 0.02608776}, {4, 0.9739122}}), std::unordered_map<int, float>({{4, 1.0}}), std::unordered_map<int, float>({{3, 0.0097512}, {4, 0.9902489}}), std::unordered_map<int, float>({{3, 0.02471315}, {4, 0.9752868}}), std::unordered_map<int, float>({{3, 0.01386606}, {4, 0.986134}}), std::unordered_map<int, float>({{4, 1.0}}), std::unordered_map<int, float>({{4, 1.0}}), std::unordered_map<int, float>({{3, 0.0077762}, {4, 0.9922237}}), std::unordered_map<int, float>({{3, 0.000501243}, {4, 0.9994988}}), std::unordered_map<int, float>({{4, 1.0}}), std::unordered_map<int, float>({{3, 0.009547173}, {4, 0.9904528}}), std::unordered_map<int, float>({{3, 0.007215201}, {4, 0.9927848}}), std::unordered_map<int, float>({{3, 0.01125699}, {4, 0.988743}}), std::unordered_map<int, float>({{3, 0.008681952}, {4, 0.991318}}), std::unordered_map<int, float>({{3, 0.007487893}, {4, 0.9925121}}), std::unordered_map<int, float>({{3, 0.007989525}, {4, 0.9920104}}), std::unordered_map<int, float>({{4, 1.0}}), std::unordered_map<int, float>({{4, 1.0}}), std::unordered_map<int, float>({{4, 1.0}}), std::unordered_map<int, float>({{4, 1.0}}), std::unordered_map<int, float>({{3, 0.000255094}, {4, 0.9944952}, {8, 0.005016684}, {9, 0.000233017}}), std::unordered_map<int, float>({{3, 0.001588463}, {4, 0.9964163}, {8, 0.001815199}, {9, 0.000179984}}), std::unordered_map<int, float>({{3, 0.000100256}, {4, 0.9928976}, {8, 0.006780803}, {9, 0.000221352}}), std::unordered_map<int, float>({{3, 0.000121929}, {4, 0.9979963}, {8, 0.001542448}, {9, 0.000339331}}), std::unordered_map<int, float>({{4, 0.995273}, {8, 0.00458014}, {9, 0.000146951}}), std::unordered_map<int, float>({{3, 0.000264404}, {4, 0.9993865}, {8, 0.000245593}, {9, 0.000103503}}), std::unordered_map<int, float>({{3, 0.000227781}, {4, 0.9902892}, {8, 0.009101331}, {9, 0.000381626}}), std::unordered_map<int, float>({{3, 0.000491965}, {4, 0.9963774}, {8, 0.002986311}, {9, 0.000144314}}), std::unordered_map<int, float>({{3, 0.000281495}, {4, 0.9934244}, {8, 0.006104946}, {9, 0.000189047}}), std::unordered_map<int, float>({{3, 0.000242091}, {4, 0.9875561}, {8, 0.01190471}, {9, 0.000297069}}), std::unordered_map<int, float>({{3, 0.000312302}, {4, 0.9996877}}), std::unordered_map<int, float>({{3, 0.000169274}, {4, 0.9998307}}), std::unordered_map<int, float>({{3, 0.000608681}, {4, 0.9993913}}), std::unordered_map<int, float>({{4, 1.0}}), std::unordered_map<int, float>({{3, 0.000192718}, {4, 0.9819429}, {8, 0.01729559}, {9, 0.000568788}}), std::unordered_map<int, float>({{3, 0.000939251}, {4, 0.9908257}, {8, 0.00795865}, {9, 0.000276231}}), std::unordered_map<int, float>({{3, 0.001027524}, {4, 0.9989725}}), std::unordered_map<int, float>({{3, 0.00012583}, {4, 0.9998742}}), std::unordered_map<int, float>({{3, 0.002928793}, {4, 0.9970712}}), std::unordered_map<int, float>({{4, 1.0}}), std::unordered_map<int, float>({{3, 0.000118371}, {4, 0.9998816}}), std::unordered_map<int, float>({{4, 1.0}}), std::unordered_map<int, float>({{4, 1.0}}), std::unordered_map<int, float>({{3, 0.000581378}, {4, 0.9994186}}), std::unordered_map<int, float>({{4, 1.0}}), std::unordered_map<int, float>({{3, 0.001044392}, {4, 0.9989556}}), std::unordered_map<int, float>({{4, 1.0}}), std::unordered_map<int, float>({{4, 1.0}}), std::unordered_map<int, float>({{4, 1.0}}), std::unordered_map<int, float>({{4, 1.0}}), std::unordered_map<int, float>({{3, 0.001055717}, {4, 0.9989442}}), std::unordered_map<int, float>({{3, 0.000189838}, {4, 0.9998102}}), std::unordered_map<int, float>({{3, 0.002120077}, {4, 0.9936287}, {8, 0.004251122}}), std::unordered_map<int, float>({{4, 0.9992343}, {8, 0.000765734}}), std::unordered_map<int, float>({{4, 0.9909895}, {8, 0.009010553}}), std::unordered_map<int, float>({{4, 0.9994838}, {8, 0.000516119}}), std::unordered_map<int, float>({{3, 0.000354372}, {4, 0.9953222}, {8, 0.004323363}}), std::unordered_map<int, float>({{3, 0.000540712}, {4, 0.9992925}, {8, 0.000166835}}), std::unordered_map<int, float>({{3, 0.000109856}, {4, 0.9974473}, {8, 0.002442896}}), std::unordered_map<int, float>({{3, 0.005521059}, {4, 0.994479}}), std::unordered_map<int, float>({{3, 0.000100651}, {4, 0.9981105}, {8, 0.001788794}}), std::unordered_map<int, float>({{3, 0.001849412}, {4, 0.9918807}, {8, 0.006269872}}), std::unordered_map<int, float>({{4, 1.0}}), std::unordered_map<int, float>({{4, 1.0}}), std::unordered_map<int, float>({{4, 1.0}}), std::unordered_map<int, float>({{4, 1.0}}), std::unordered_map<int, float>({{3, 0.001137733}, {4, 0.9859507}, {8, 0.01291149}}), std::unordered_map<int, float>({{4, 0.9959926}, {8, 0.004007339}}), std::unordered_map<int, float>({{3, 0.000761043}, {4, 0.999239}}), std::unordered_map<int, float>({{3, 0.005415916}, {4, 0.994584}}), std::unordered_map<int, float>({{4, 1.0}}), std::unordered_map<int, float>({{4, 1.0}}), std::unordered_map<int, float>({{4, 1.0}}), std::unordered_map<int, float>({{3, 0.000140324}, {4, 0.9998597}}), std::unordered_map<int, float>({{3, 0.000105144}, {4, 0.9998948}}), std::unordered_map<int, float>({{3, 0.000173636}, {4, 0.9998263}}), std::unordered_map<int, float>({{3, 0.000102078}, {4, 0.999898}}), std::unordered_map<int, float>({{3, 0.000813917}, {4, 0.9991861}}), std::unordered_map<int, float>({{3, 0.000104946}, {4, 0.999895}}), std::unordered_map<int, float>({{3, 0.000133727}, {4, 0.9998663}}), std::unordered_map<int, float>({{3, 0.003743648}, {4, 0.9962564}}), std::unordered_map<int, float>({{4, 1.0}}), std::unordered_map<int, float>({{3, 0.000861875}, {4, 0.9991381}}), std::unordered_map<int, float>({{3, 0.006822824}, {4, 0.9931772}}), std::unordered_map<int, float>({{3, 0.01157677}, {4, 0.9884231}}), std::unordered_map<int, float>({{3, 0.00672388}, {4, 0.9932761}}), std::unordered_map<int, float>({{3, 0.001333653}, {4, 0.9986664}}), std::unordered_map<int, float>({{3, 0.00025262}, {4, 0.9997473}}), std::unordered_map<int, float>({{4, 1.0}}), std::unordered_map<int, float>({{3, 0.00088102}, {4, 0.9991191}}), std::unordered_map<int, float>({{3, 0.000825247}, {4, 0.9991748}}), std::unordered_map<int, float>({{3, 0.002333223}, {4, 0.9976667}}), std::unordered_map<int, float>({{3, 0.000693866}, {4, 0.9993062}}), std::unordered_map<int, float>({{3, 0.009923696}, {4, 0.9900763}}), std::unordered_map<int, float>({{4, 1.0}}), std::unordered_map<int, float>({{4, 1.0}}), std::unordered_map<int, float>({{4, 1.0}}), std::unordered_map<int, float>({{4, 1.0}}), std::unordered_map<int, float>({{3, 0.01232826}, {4, 0.9876717}}), std::unordered_map<int, float>({{3, 0.007169544}, {4, 0.9928305}}), std::unordered_map<int, float>({{3, 0.01279586}, {4, 0.9872041}}), std::unordered_map<int, float>({{3, 0.000236701}, {4, 0.9997633}}), std::unordered_map<int, float>({{3, 0.004748821}, {4, 0.9945199}, {8, 0.000731133}}), std::unordered_map<int, float>({{4, 1.0}}), std::unordered_map<int, float>({{4, 1.0}}), std::unordered_map<int, float>({{3, 0.001048862}, {4, 0.9989511}}), std::unordered_map<int, float>({{3, 0.004181325}, {4, 0.9958187}}), std::unordered_map<int, float>({{3, 0.01351231}, {4, 0.9864876}}), std::unordered_map<int, float>({{3, 0.003778815}, {4, 0.9957488}, {5, 0.000472299}}), std::unordered_map<int, float>({{3, 0.008794367}, {4, 0.9898289}, {8, 0.001376628}}), std::unordered_map<int, float>({{4, 1.0}}), std::unordered_map<int, float>({{4, 1.0}}), std::unordered_map<int, float>({{4, 1.0}}), std::unordered_map<int, float>({{4, 1.0}}), std::unordered_map<int, float>({{3, 0.01007103}, {4, 0.9899289}}), std::unordered_map<int, float>({{3, 0.00020455}, {4, 0.9997954}}), std::unordered_map<int, float>({{3, 0.01291167}, {4, 0.9856343}, {8, 0.001453995}}), std::unordered_map<int, float>({{3, 0.002263605}, {4, 0.9977364}}), std::unordered_map<int, float>({{3, 0.002813458}, {4, 0.9961628}, {8, 0.001023709}}), std::unordered_map<int, float>({{4, 0.9995646}, {8, 0.000435391}}), std::unordered_map<int, float>({{3, 0.003617703}, {4, 0.9962188}, {5, 0.000163408}}), std::unordered_map<int, float>({{3, 0.004331648}, {4, 0.9956683}}), std::unordered_map<int, float>({{3, 0.03691971}, {4, 0.9630803}}), std::unordered_map<int, float>({{3, 0.03431636}, {4, 0.9656836}}), std::unordered_map<int, float>({{3, 0.02789187}, {4, 0.9721081}}), std::unordered_map<int, float>({{3, 0.01105815}, {4, 0.9872434}, {8, 0.001698315}}), std::unordered_map<int, float>({{4, 1.0}}), std::unordered_map<int, float>({{4, 1.0}}), std::unordered_map<int, float>({{4, 1.0}}), std::unordered_map<int, float>({{4, 1.0}}), std::unordered_map<int, float>({{3, 0.007756114}, {4, 0.9906188}, {8, 0.001625061}}), std::unordered_map<int, float>({{3, 0.001382052}, {4, 0.998618}}), std::unordered_map<int, float>({{22, 0.2026405}, {23, 0.7973595}}), std::unordered_map<int, float>({{22, 0.1565453}, {23, 0.8434547}}), std::unordered_map<int, float>({{22, 0.8185073}, {23, 0.1814927}}), std::unordered_map<int, float>({{22, 0.3905121}, {23, 0.609488}}), std::unordered_map<int, float>({{22, 0.8260492}, {23, 0.1739508}}), std::unordered_map<int, float>({{22, 0.8189488}, {23, 0.1810511}}), std::unordered_map<int, float>({{22, 0.3577028}, {23, 0.6422972}}), std::unordered_map<int, float>({{22, 0.798854}, {23, 0.201146}}), std::unordered_map<int, float>({{22, 0.2410051}, {23, 0.7589949}}), std::unordered_map<int, float>({{22, 0.2398527}, {23, 0.7601472}}), std::unordered_map<int, float>({{22, 0.2387263}, {23, 0.7612738}}), std::unordered_map<int, float>({{22, 0.7459187}, {23, 0.2540813}}), std::unordered_map<int, float>({{22, 0.2387263}, {23, 0.7612738}}), std::unordered_map<int, float>({{22, 0.7459187}, {23, 0.2540813}}), std::unordered_map<int, float>({{22, 0.7132432}, {23, 0.2867568}}), std::unordered_map<int, float>({{22, 0.8257114}, {23, 0.1742886}}), std::unordered_map<int, float>({{23, 0.130561}, {24, 0.869439}}), std::unordered_map<int, float>({{23, 0.1028345}, {24, 0.8971655}}), std::unordered_map<int, float>({{23, 0.8465527}, {24, 0.1534473}}), std::unordered_map<int, float>({{23, 0.3786398}, {24, 0.6213602}}), std::unordered_map<int, float>({{23, 0.8468877}, {24, 0.1531122}}), std::unordered_map<int, float>({{23, 0.7849027}, {24, 0.2150973}}), std::unordered_map<int, float>({{23, 0.1888635}, {24, 0.8111366}}), std::unordered_map<int, float>({{23, 0.2401483}, {24, 0.7598517}}), std::unordered_map<int, float>({{23, 0.1590434}, {24, 0.8409565}}), std::unordered_map<int, float>({{23, 0.1590126}, {24, 0.8409873}}), std::unordered_map<int, float>({{23, 0.1727674}, {24, 0.8272325}}), std::unordered_map<int, float>({{23, 0.8189898}, {24, 0.1810103}}), std::unordered_map<int, float>({{23, 0.1727674}, {24, 0.8272325}}), std::unordered_map<int, float>({{23, 0.8189898}, {24, 0.1810103}}), std::unordered_map<int, float>({{23, 0.500519}, {24, 0.499481}}), std::unordered_map<int, float>({{23, 0.5230453}, {24, 0.4769547}}), std::unordered_map<int, float>({{24, 1.0}}), std::unordered_map<int, float>({{24, 1.0}}), std::unordered_map<int, float>({{24, 1.0}}), std::unordered_map<int, float>({{24, 1.0}}), std::unordered_map<int, float>({{24, 1.0}}), std::unordered_map<int, float>({{24, 1.0}}), std::unordered_map<int, float>({{24, 1.0}}), std::unordered_map<int, float>({{24, 1.0}}), std::unordered_map<int, float>({{24, 1.0}}), std::unordered_map<int, float>({{24, 1.0}}), std::unordered_map<int, float>({{24, 1.0}}), std::unordered_map<int, float>({{24, 1.0}}), std::unordered_map<int, float>({{24, 1.0}}), std::unordered_map<int, float>({{24, 1.0}}), std::unordered_map<int, float>({{24, 1.0}}), std::unordered_map<int, float>({{24, 1.0}}), std::unordered_map<int, float>({{8, 0.001336932}, {9, 0.9551949}, {10, 0.04346817}}), std::unordered_map<int, float>({{8, 0.003732144}, {9, 0.9961447}, {10, 0.000123249}}), std::unordered_map<int, float>({{8, 0.02744001}, {9, 0.9725601}}), std::unordered_map<int, float>({{9, 0.998593}, {10, 0.001406967}}), std::unordered_map<int, float>({{8, 0.000240189}, {9, 0.9904952}, {10, 0.009264647}}), std::unordered_map<int, float>({{9, 0.999534}, {10, 0.000466013}}), std::unordered_map<int, float>({{8, 0.009162306}, {9, 0.9529805}, {10, 0.03785717}}), std::unordered_map<int, float>({{9, 0.9899986}, {10, 0.01000136}}), std::unordered_map<int, float>({{8, 0.02442061}, {9, 0.9755793}}), std::unordered_map<int, float>({{8, 0.001750886}, {9, 0.9982491}}), std::unordered_map<int, float>({{9, 0.989753}, {10, 0.01024699}}), std::unordered_map<int, float>({{9, 0.9995225}, {10, 0.000477533}}), std::unordered_map<int, float>({{9, 0.9998696}, {10, 0.000130393}}), std::unordered_map<int, float>({{9, 0.9985514}, {10, 0.001448512}}), std::unordered_map<int, float>({{8, 0.00104916}, {9, 0.9500269}, {10, 0.04892379}}), std::unordered_map<int, float>({{9, 0.999875}, {10, 0.000125036}}), std::unordered_map<int, float>({{8, 1.0}}), std::unordered_map<int, float>({{8, 1.0}}), std::unordered_map<int, float>({{8, 1.0}}), std::unordered_map<int, float>({{8, 1.0}}), std::unordered_map<int, float>({{8, 1.0}}), std::unordered_map<int, float>({{8, 1.0}}), std::unordered_map<int, float>({{8, 1.0}}), std::unordered_map<int, float>({{8, 1.0}}), std::unordered_map<int, float>({{8, 1.0}}), std::unordered_map<int, float>({{8, 1.0}}), std::unordered_map<int, float>({{8, 1.0}}), std::unordered_map<int, float>({{8, 1.0}}), std::unordered_map<int, float>({{8, 1.0}}), std::unordered_map<int, float>({{8, 1.0}}), std::unordered_map<int, float>({{8, 1.0}}), std::unordered_map<int, float>({{8, 1.0}}), std::unordered_map<int, float>({{6, 0.9293932}, {7, 0.07060676}}), std::unordered_map<int, float>({{6, 0.9807112}, {7, 0.01928877}}), std::unordered_map<int, float>({{6, 0.9755651}, {7, 0.02443492}}), std::unordered_map<int, float>({{6, 0.9356457}, {7, 0.06435424}}), std::unordered_map<int, float>({{6, 1.0}}), std::unordered_map<int, float>({{6, 0.9551681}, {7, 0.04483193}}), std::unordered_map<int, float>({{6, 0.9898093}, {7, 0.01019066}}), std::unordered_map<int, float>({{6, 0.974084}, {7, 0.02591592}}), std::unordered_map<int, float>({{6, 1.0}}), std::unordered_map<int, float>({{6, 1.0}}), std::unordered_map<int, float>({{6, 0.973376}, {7, 0.02662402}}), std::unordered_map<int, float>({{6, 0.9540352}, {7, 0.04596477}}), std::unordered_map<int, float>({{6, 0.9797819}, {7, 0.02021819}}), std::unordered_map<int, float>({{6, 0.9341267}, {7, 0.06587332}}), std::unordered_map<int, float>({{6, 0.9527677}, {7, 0.04723227}}), std::unordered_map<int, float>({{5, 0.001048386}, {6, 0.9794882}, {7, 0.01946341}}), std::unordered_map<int, float>({{15, 1.0}}), std::unordered_map<int, float>({{15, 1.0}}), std::unordered_map<int, float>({{15, 1.0}}), std::unordered_map<int, float>({{15, 1.0}}), std::unordered_map<int, float>({{15, 1.0}}), std::unordered_map<int, float>({{14, 0.01738852}, {15, 0.9826115}}), std::unordered_map<int, float>({{14, 0.3545382}, {15, 0.6454618}}), std::unordered_map<int, float>({{14, 0.4185398}, {15, 0.5814602}}), std::unordered_map<int, float>({{15, 1.0}}), std::unordered_map<int, float>({{15, 1.0}}), std::unordered_map<int, float>({{15, 1.0}}), std::unordered_map<int, float>({{15, 1.0}}), std::unordered_map<int, float>({{15, 1.0}}), std::unordered_map<int, float>({{15, 1.0}}), std::unordered_map<int, float>({{14, 0.3787091}, {15, 0.6212909}}), std::unordered_map<int, float>({{14, 0.3992132}, {15, 0.6007868}}), std::unordered_map<int, float>({{11, 1.0}}), std::unordered_map<int, float>({{0, 0.06448048}, {11, 0.9355195}}), std::unordered_map<int, float>({{11, 1.0}}), std::unordered_map<int, float>({{0, 0.08771443}, {11, 0.9122856}}), std::unordered_map<int, float>({{0, 0.1108379}, {11, 0.8891621}}), std::unordered_map<int, float>({{0, 0.1359372}, {11, 0.8640627}}), std::unordered_map<int, float>({{0, 0.1466382}, {11, 0.8533619}}), std::unordered_map<int, float>({{0, 0.1989991}, {11, 0.801001}}), std::unordered_map<int, float>({{0, 0.0881524}, {11, 0.9118476}}), std::unordered_map<int, float>({{0, 0.02797394}, {11, 0.972026}}), std::unordered_map<int, float>({{11, 1.0}}), std::unordered_map<int, float>({{11, 1.0}}), std::unordered_map<int, float>({{11, 1.0}}), std::unordered_map<int, float>({{11, 1.0}}), std::unordered_map<int, float>({{0, 0.7115163}, {11, 0.2884837}}), std::unordered_map<int, float>({{0, 0.2800304}, {11, 0.7199696}}), std::unordered_map<int, float>({{12, 0.2513195}, {13, 0.5604873}, {14, 0.1881932}}), std::unordered_map<int, float>({{12, 0.3517002}, {13, 0.5177463}, {14, 0.1305534}}), std::unordered_map<int, float>({{12, 0.1810741}, {13, 0.590397}, {14, 0.2285289}}), std::unordered_map<int, float>({{12, 0.05881536}, {13, 0.5377691}, {14, 0.4034154}}), std::unordered_map<int, float>({{11, 0.01010704}, {12, 0.2067241}, {13, 0.6712071}, {14, 0.1119617}}), std::unordered_map<int, float>({{12, 0.08973807}, {13, 0.853259}, {14, 0.05700296}}), std::unordered_map<int, float>({{12, 0.3343236}, {13, 0.6115772}, {14, 0.0540992}}), std::unordered_map<int, float>({{12, 0.4424047}, {13, 0.5575953}}), std::unordered_map<int, float>({{12, 0.2029497}, {13, 0.6594761}, {14, 0.1375741}}), std::unordered_map<int, float>({{12, 0.1885103}, {13, 0.6138791}, {14, 0.1976106}}), std::unordered_map<int, float>({{12, 0.6266675}, {13, 0.3733324}}), std::unordered_map<int, float>({{12, 0.7963829}, {13, 0.2036171}}), std::unordered_map<int, float>({{12, 0.7685726}, {13, 0.2314274}}), std::unordered_map<int, float>({{12, 0.8685091}, {13, 0.1314908}}), std::unordered_map<int, float>({{12, 0.4219439}, {13, 0.578056}}), std::unordered_map<int, float>({{12, 0.4771645}, {13, 0.5228356}}), std::unordered_map<int, float>({{11, 0.767391}, {12, 0.232609}}), std::unordered_map<int, float>({{11, 0.1991487}, {12, 0.8008514}}), std::unordered_map<int, float>({{11, 0.6771504}, {12, 0.3228496}}), std::unordered_map<int, float>({{11, 0.1434597}, {12, 0.8565402}}), std::unordered_map<int, float>({{11, 0.7433269}, {12, 0.2566732}}), std::unordered_map<int, float>({{11, 0.0874558}, {12, 0.9125442}}), std::unordered_map<int, float>({{11, 0.5672727}, {12, 0.4327273}}), std::unordered_map<int, float>({{11, 0.1060352}, {12, 0.8939648}}), std::unordered_map<int, float>({{11, 0.7657169}, {12, 0.234283}}), std::unordered_map<int, float>({{11, 0.6262053}, {12, 0.3737946}}), std::unordered_map<int, float>({{12, 1.0}}), std::unordered_map<int, float>({{12, 1.0}}), std::unordered_map<int, float>({{12, 1.0}}), std::unordered_map<int, float>({{12, 1.0}}), std::unordered_map<int, float>({{11, 0.5556553}, {12, 0.4443446}}), std::unordered_map<int, float>({{11, 0.10595}, {12, 0.89405}}), std::unordered_map<int, float>({{16, 0.6752951}, {17, 0.3247049}}), std::unordered_map<int, float>({{16, 0.1297873}, {17, 0.8702127}}), std::unordered_map<int, float>({{16, 0.5739529}, {17, 0.4260472}}), std::unordered_map<int, float>({{16, 0.0870999}, {17, 0.9129001}}), std::unordered_map<int, float>({{16, 0.6167185}, {17, 0.3832816}}), std::unordered_map<int, float>({{16, 0.05319404}, {17, 0.946806}}), std::unordered_map<int, float>({{16, 0.4910587}, {17, 0.5089414}}), std::unordered_map<int, float>({{16, 0.06174159}, {17, 0.9382584}}), std::unordered_map<int, float>({{16, 0.5513178}, {17, 0.4486822}}), std::unordered_map<int, float>({{16, 0.6365097}, {17, 0.3634903}}), std::unordered_map<int, float>({{17, 1.0}}), std::unordered_map<int, float>({{17, 1.0}}), std::unordered_map<int, float>({{17, 1.0}}), std::unordered_map<int, float>({{17, 1.0}}), std::unordered_map<int, float>({{16, 0.5161451}, {17, 0.4838548}}), std::unordered_map<int, float>({{16, 0.061993}, {17, 0.9380071}}), std::unordered_map<int, float>({{16, 1.0}}), std::unordered_map<int, float>({{16, 1.0}}), std::unordered_map<int, float>({{16, 1.0}}), std::unordered_map<int, float>({{16, 1.0}}), std::unordered_map<int, float>({{16, 1.0}}), std::unordered_map<int, float>({{16, 1.0}}), std::unordered_map<int, float>({{16, 1.0}}), std::unordered_map<int, float>({{16, 1.0}}), std::unordered_map<int, float>({{16, 1.0}}), std::unordered_map<int, float>({{16, 1.0}}), std::unordered_map<int, float>({{16, 1.0}}), std::unordered_map<int, float>({{16, 1.0}}), std::unordered_map<int, float>({{16, 1.0}}), std::unordered_map<int, float>({{16, 1.0}}), std::unordered_map<int, float>({{16, 1.0}}), std::unordered_map<int, float>({{16, 1.0}}), std::unordered_map<int, float>({{20, 1.0}}), std::unordered_map<int, float>({{20, 1.0}}), std::unordered_map<int, float>({{20, 1.0}}), std::unordered_map<int, float>({{20, 1.0}}), std::unordered_map<int, float>({{20, 1.0}}), std::unordered_map<int, float>({{19, 0.0200541}, {20, 0.9799458}}), std::unordered_map<int, float>({{19, 0.3807082}, {20, 0.6192919}}), std::unordered_map<int, float>({{19, 0.4268662}, {20, 0.5731338}}), std::unordered_map<int, float>({{20, 1.0}}), std::unordered_map<int, float>({{20, 1.0}}), std::unordered_map<int, float>({{20, 1.0}}), std::unordered_map<int, float>({{20, 1.0}}), std::unordered_map<int, float>({{20, 1.0}}), std::unordered_map<int, float>({{20, 1.0}}), std::unordered_map<int, float>({{19, 0.4432828}, {20, 0.5567172}}), std::unordered_map<int, float>({{19, 0.4589335}, {20, 0.5410665}}), std::unordered_map<int, float>({{17, 0.2662954}, {18, 0.6503983}, {19, 0.08330631}}), std::unordered_map<int, float>({{17, 0.3762289}, {18, 0.6160283}, {19, 0.007742762}}), std::unordered_map<int, float>({{17, 0.2013751}, {18, 0.6808391}, {19, 0.1177857}}), std::unordered_map<int, float>({{17, 0.09426075}, {18, 0.8321904}, {19, 0.07354885}}), std::unordered_map<int, float>({{17, 0.2154878}, {18, 0.581785}, {19, 0.2027273}}), std::unordered_map<int, float>({{17, 0.05637431}, {18, 0.5274101}, {19, 0.4162155}}), std::unordered_map<int, float>({{17, 0.3403113}, {18, 0.5403152}, {19, 0.1193735}}), std::unordered_map<int, float>({{17, 0.4263529}, {18, 0.5073088}, {19, 0.06633841}}), std::unordered_map<int, float>({{17, 0.2116243}, {18, 0.6089021}, {19, 0.1794735}}), std::unordered_map<int, float>({{17, 0.2042971}, {18, 0.6603298}, {19, 0.135373}}), std::unordered_map<int, float>({{17, 0.7685726}, {18, 0.2314273}}), std::unordered_map<int, float>({{17, 0.8685092}, {18, 0.1314908}}), std::unordered_map<int, float>({{17, 0.6266675}, {18, 0.3733325}}), std::unordered_map<int, float>({{17, 0.7963829}, {18, 0.2036171}}), std::unordered_map<int, float>({{17, 0.4068719}, {18, 0.522237}, {19, 0.07089102}}), std::unordered_map<int, float>({{17, 0.4798023}, {18, 0.5182141}, {19, 0.001983582}})});

	Scene s = scene_blank(true);

	RiggedMesh rmeshx(BONE_v, BONE_t, BONE_tex, BONE_texco, BONE_bones, BONE_parent, BONE_bonetrans, BONE_bonetips, BONE_atips, BONE_weights);
	rmeshx.Trans(Transform(Vector3(0, -1, -2)));

	// Example deformations. You can get the bone index from a bone name using bone_names_inv.

	std::cout << "Head --> " << rmeshx.bone_names_inv["Head"] << "\n";

	// WARNING - Deformations are with respect to the parent's local coordinates. So things are a bit wonky.

	rmeshx.deformations[rmeshx.bone_names_inv["Head"]] = Rotation(Vector3(0, 1, 0), M_PI * -0.1); // in this warped nightmare world, Y points forward, Z points up, and X points left. Coordinate distortions are common, be aware of those until a future patch.

	// rmeshx.deform("Arm_R", Rotation(Vector3(0, 0, 1), M_PI * 0.8)); // Equivalent to rmeshx.deformations[rmeshx.bone_names_inv["Arm_R"]] = ...
	// The coordinate system for each bone is different. Here, Y points vertical, Z backwards.

	rmeshx.computeAbsoluteTransforms();
	rmeshx.computeVertexLocations();

	ImageTexture mat(cubemap);
	ImageTexture texproto(mcrproto); // use this on the proto mesh

	// s.addMesh(&rmeshx, &texproto);

	auto vv = rmeshx.visBones(0.05);
	for (auto i : vv) s.addMesh(&i);

	s.render();
	std::cout << "Prepared\n";

	std::cout << "Drawn " << s.countTriangles() << " Triangles\n";

	s.outputBuffer(BUFFER_PATH);

	std::cout << "Stored\n";
}

int main() {
	std::cout << "BEGIN\n";
	auto start = std::chrono::high_resolution_clock::now();

	// BoneTreeTest();
	// CylinderTest();
	// SkeletonTest();
	// SkinTest();
	// SkinAnim();
	MCRProtoAnim();

	/*


	Matrix2 A(2, 4, -3, 1);
	std::cout << A.to_string() << "\n" << A.inv().to_string() << "\n" << (A.inv() * A).to_string() << std::endl;

	Vector3 v(1, 2, 3);

	Vector3 u = v;
	u.x = 100;
	std::cout << u.to_string() << " " << v.to_string() << "\n";

	Vector3 defaultconstest;

	std::cout << defaultconstest.to_string() << "\n";

	*/

	std::cout << "End\n";



	auto end = std::chrono::high_resolution_clock::now();
    auto duration = std::chrono::duration_cast<std::chrono::microseconds>(end - start);

	int64_t count = duration.count();
    std::cout << "Time taken: " << count << " us" << std::endl;
	std::cout << "Time taken: " << count * 0.001 << " ms" << std::endl;
	std::cout << "Time taken: " << count * 0.000001 << " s" << std::endl;

	return 0;
}