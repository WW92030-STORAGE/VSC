#ifndef BONEMESH_EXT
#define BONEMMESH_EXT

#include <sstream>
#include <string>
#include <fstream>
#include <vector>
#include <utility>
#include <cstdlib>
#include <map>

#include "Triangle.h"
#include "Object.h"
#include "../utils/math/Matrices.h"
#include "../utils/math/Transform.h"

#include "../utils/stringutils.h"
#include "../utils/LinkedList.h"
#include "../utils/Utils.h"

#include "Mesh.h"

/*

Triangle mesh with skeletal animation capabilities.
Vertices can have any number of bones influencing them.

*/

class BoneMesh : public Mesh {
    /*

	std::vector<Vector3> verts; // Array of vertices
	std::vector<std::vector<int>> triindices; // Triangle indices in the vertex array;
	std::vector<std::vector<int>> texcoords; // Texture indices per triangle

	std::vector<Vector3> vn; // Vertex normals. Initialized when we do setupvertsntris() but can also be manually set e.g. when looking thru a .obj file.
	std::vector<Vector2> uv; // Texture coordinates

	*/

    /*
	
	Bones. In the rest position, the starting position upon import, all relative transforms are identity matrices.
	
	*/

    int NB = 0; // number of bones
	std::vector<int> parent; // Parent of each bone: The parent of a root bone is -1.
	std::vector<std::vector<int>> children; // Children of each bone: the children of leaf bones are empty vectors.

	std::vector<Matrix4> R; // Relative rotation relative to the parent (if no parent then R is the same as D)
	std::vector<Matrix4> D; // 
	std::vector<Vector3> disp; // Displacements of bones IN THE REST POSITION I.E. IN RELATIVE COORDINATES
};

#endif